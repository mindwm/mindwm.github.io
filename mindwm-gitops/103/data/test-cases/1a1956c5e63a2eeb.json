{"uid":"1a1956c5e63a2eeb","name":"test_kafka_source","fullName":"test_mindwm_context.Test_MindwmContext#test_kafka_source","historyId":"d4938a26838d1cdfdfe15b80e122050d","time":{"start":1726159527921,"stop":1726159588682,"duration":60761},"status":"broken","statusMessage":"TimeoutError: timed out (60s) while waiting for condition <Condition (name: wait for kafkaSource resource, met: False)>","statusTrace":"self = <test_mindwm_context.Test_MindwmContext object at 0x7cec69496420>\nkube = <kubetest.client.TestClient object at 0x7cec68cebce0>\n\n    @pytest.mark.dependency(name = \"kafka_source\", on=[\"context_broker\"], scope = 'session')\n    def test_kafka_source(self, kube):\n        wait_for_condition(Condition(\"wait for kafkaSource resource\", kubernetes_utils.wait_for_kafka_source, kube,f\"context-{self.ctx.name}-cdc-kafkasource\", self.ctx.context_namespace), DEFAULT_TIMEOUT)\n>       wait_for_condition(Condition(\"wait for kafkaSource resource\", kubernetes_utils.wait_for_kafka_source_is_ready, kube,f\"context-{self.ctx.name}-cdc-kafkasource\", self.ctx.context_namespace), DEFAULT_TIMEOUT)\n\ntest_mindwm_context.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncondition = <Condition (name: wait for kafkaSource resource, met: False)>\ntimeout = 60, interval = 1, fail_on_api_error = True\n\n    def wait_for_condition(\n        condition: Condition,\n        timeout: int = None,\n        interval: Union[int, float] = 1,\n        fail_on_api_error: bool = True,\n    ) -> None:\n        \"\"\"Wait for a condition to be met.\n    \n        Args:\n            condition: The Condition to wait for.\n            timeout: The maximum time to wait, in seconds, for the condition to be met.\n                If unspecified, this function will wait indefinitely. If specified and\n                the timeout is met or exceeded, a TimeoutError will be raised.\n            interval: The time, in seconds, to wait before re-checking the condition.\n            fail_on_api_error: Fail the condition checks if a Kubernetes API error is\n                incurred. An API error can be raised for a number of reasons, including\n                a Pod being restarted and temporarily unavailable. Disabling this will\n                cause those errors to be ignored, allowing the check to continue until\n                timeout or resolution. (default: True).\n    \n        Raises:\n            TimeoutError: The specified timeout was exceeded.\n        \"\"\"\n        log.info(f\"waiting for condition: {condition}\")\n    \n        # define the maximum time to wait. once this is met, we should\n        # stop waiting.\n        max_time = None\n        if timeout is not None:\n            max_time = time.time() + timeout\n    \n        # start the wait block\n        start = time.time()\n        while True:\n            if max_time and time.time() >= max_time:\n>               raise TimeoutError(\n                    f\"timed out ({timeout}s) while waiting for condition {condition}\"\n                )\nE               TimeoutError: timed out (60s) while waiting for condition <Condition (name: wait for kafkaSource resource, met: False)>\n\n.venv/lib/python3.12/site-packages/kubetest/utils.py:130: TimeoutError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"kube","time":{"start":1726159527759,"stop":1726159527920,"duration":161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubeconfig","time":{"start":1726159527759,"stop":1726159527759,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubecontext","time":{"start":1726159527759,"stop":1726159527759,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"tag","value":"dependency(name='kafka_source', on=['context_broker'], scope='session')"},{"name":"suite","value":"test_mindwm_context"},{"name":"subSuite","value":"Test_MindwmContext"},{"name":"host","value":"localhost"},{"name":"thread","value":"3913-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_mindwm_context"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["dependency(name='kafka_source', on=['context_broker'], scope='session')"]},"source":"1a1956c5e63a2eeb.json","parameterValues":[]}