{"uid":"93858464b6180674","name":"test_kafka_source","fullName":"test_mindwm_context.Test_MindwContext#test_kafka_source","historyId":"8a7aacd587df8fb2bd16cf88531df5ad","time":{"start":1726157172504,"stop":1726157173644,"duration":1140},"status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <test_mindwm_context.Test_MindwContext object at 0x76e96abfe8a0>\nkube = <kubetest.client.TestClient object at 0x76e96a7646b0>\n\n    @pytest.mark.dependency(name = \"kafka_source\", on=[\"context_broker\"], scope = 'session')\n    def test_kafka_source(self, kube):\n        wait_for_condition(Condition(\"wait for kafkaSource resource\", kubernetes_utils.wait_for_kafka_source, kube,f\"context-{self.ctx.name}-cdc-kafkasource\", self.ctx.context_namespace), DEFAULT_TIMEOUT)\n>       wait_for_condition(Condition(\"wait for kafkaSource resource\", kubernetes_utils.wait_for_kafka_source_is_ready, kube,f\"context-{self.ctx.name}-cdc-kafkasource\", self.ctx.context_namespace), DEFAULT_TIMEOUT)\n\ntest_mindwm_context.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/kubetest/utils.py:136: in wait_for_condition\n    if condition.check():\n.venv/lib/python3.12/site-packages/kubetest/condition.py:73: in check\n    self.last_check = bool(self.fn(*self.args, **self.kwargs))\nkubernetes_utils.py:140: in wait_for_kafka_source_is_ready\n    if not json.loads(status[0].status.lower()):\n/usr/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x76e96d42d880>, s = 'unknown'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.12/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"kubecontext","time":{"start":1726157172479,"stop":1726157172479,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kube","time":{"start":1726157172479,"stop":1726157172503,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubeconfig","time":{"start":1726157172479,"stop":1726157172479,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"tag","value":"dependency(name='kafka_source', on=['context_broker'], scope='session')"},{"name":"suite","value":"test_mindwm_context"},{"name":"subSuite","value":"Test_MindwContext"},{"name":"host","value":"localhost"},{"name":"thread","value":"4390-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_mindwm_context"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["dependency(name='kafka_source', on=['context_broker'], scope='session')"]},"source":"93858464b6180674.json","parameterValues":[]}