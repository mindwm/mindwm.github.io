{"uid":"bd95432e61901090","name":"test_send_ping_context_broker","fullName":"test_ping_pong.Test_PingPong#test_send_ping_context_broker","historyId":"4f419b2d191de4f2e1619becc689ddc5","time":{"start":1725997128606,"stop":1725997128606,"duration":0},"status":"broken","statusMessage":"requests.exceptions.InvalidURL: Invalid URL 'http:///context-pink/context-broker': No host supplied","statusTrace":"self = <test_ping_pong.Test_PingPong object at 0x728bb2902120>\n\n    def test_send_ping_context_broker(self):\n        trace_parent = generate_traceparent(trace_id)\n        url = f\"http://{ingress_host}/context-{context_name}/context-broker\"\n        print(f\"Send ping through the context-{context_name} broker {url} traceid: {trace_id}, traceparent: {trace_parent}\")\n    \n        headers = {\n            \"Host\": \"broker-ingress.knative-eventing.svc.cluster.local\",\n            \"Content-Type\": \"application/json\",\n            \"traceparent\": trace_parent,\n            \"Ce-specversion\": \"1.0\",\n            \"Ce-id\": cloudevent_uuid,\n            \"ce-source\": f\"org.mindwm.{user}.{host}.tmux.L3RtcC90bXV4LTEwMDAvZGVmYXVsdA==.09fb195c-c419-6d62-15e0-51b6ee990922.23.36\",\n            \"ce-subject\": \"#ping\",\n            \"ce-type\": \"org.mindwm.v1.iodocument\"\n        }\n    \n>       response = requests.post(url, headers=headers, data=json.dumps(payload))\n\ntest_ping_pong.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/requests/api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n.venv/lib/python3.12/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n.venv/lib/python3.12/site-packages/requests/sessions.py:575: in request\n    prep = self.prepare_request(req)\n.venv/lib/python3.12/site-packages/requests/sessions.py:484: in prepare_request\n    p.prepare(\n.venv/lib/python3.12/site-packages/requests/models.py:367: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, url = 'http:///context-pink/context-broker'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n            raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant https://{url}?\"\n            )\n    \n        if not host:\n>           raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\nE           requests.exceptions.InvalidURL: Invalid URL 'http:///context-pink/context-broker': No host supplied\n\n.venv/lib/python3.12/site-packages/requests/models.py:444: InvalidURL","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"suite","value":"test_ping_pong"},{"name":"subSuite","value":"Test_PingPong"},{"name":"host","value":"localhost"},{"name":"thread","value":"3856-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_ping_pong"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"30741de3ca5210e5","reportUrl":"https://mindwm.github.io/mindwm-gitops/93//#testresult/30741de3ca5210e5","status":"failed","statusDetails":"AssertionError: Unexpected status code: 404\nassert 404 == 202\n +  where 404 = <Response [404]>.status_code","time":{"start":1725995806745,"stop":1725995806751,"duration":6}}]},"tags":[]},"source":"bd95432e61901090.json","parameterValues":[]}