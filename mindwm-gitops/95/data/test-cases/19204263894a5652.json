{"uid":"19204263894a5652","name":"test_tracesql","fullName":"test_ping_pong.Test_PingPong#test_tracesql","historyId":"18075874899d2e7549049e2062a0701d","time":{"start":1725999676741,"stop":1725999681866,"duration":5125},"status":"failed","statusMessage":"AssertionError: Response code 404 != 200\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <test_ping_pong.Test_PingPong object at 0x786a56b09d30>\nkube = <kubetest.client.TestClient object at 0x786a57ff7e00>\n\n    @pytest.mark.depends(on=['test_send_ping_context_broker'])\n    def test_tracesql(self,kube):\n        # TODO(@metacoma) wait for resource\n        #url = f\"http://tempo.mindwm.local/api/traces/{trace_id}\"\n        ingress_host = self.get_lb(kube)\n        url = f\"http://{ingress_host}/api/traces/{trace_id}\"\n        headers = {\n            \"Host\": \"tempo.mindwm.local\"\n        }\n        print(f\"request url {url}\")\n        time.sleep(5)\n        # Perform the GET request\n        response = requests.get(url, headers = headers)\n        print(f\"Status Code: {response.status_code}\")\n        print(f\"Headers: {response.headers}\")\n        #print(f\"Response Text: {response.text}\")\n>       assert response.status_code == 200, f\"Response code {response.status_code} != 200\"\nE       AssertionError: Response code 404 != 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_ping_pong.py:110: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"kube","time":{"start":1725999676717,"stop":1725999676741,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubecontext","time":{"start":1725999676717,"stop":1725999676717,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubeconfig","time":{"start":1725999676717,"stop":1725999676717,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"tag","value":"depends(on=['test_send_ping_context_broker'])"},{"name":"suite","value":"test_ping_pong"},{"name":"subSuite","value":"Test_PingPong"},{"name":"host","value":"localhost"},{"name":"thread","value":"3945-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_ping_pong"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"37231f1ddc8d9768","reportUrl":"https://mindwm.github.io/mindwm-gitops/94//#testresult/37231f1ddc8d9768","status":"broken","statusDetails":"requests.exceptions.InvalidURL: Invalid URL 'http:///api/traces/b23217d3c9fe4d7f87a14641bf2ffae3': No host supplied","time":{"start":1725997128636,"stop":1725997133636,"duration":5000}},{"uid":"5f86fe00d09663c8","reportUrl":"https://mindwm.github.io/mindwm-gitops/93//#testresult/5f86fe00d09663c8","status":"failed","statusDetails":"AssertionError: Response code 404 != 200\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1725995806757,"stop":1725995811793,"duration":5036}}]},"tags":["depends(on=['test_send_ping_context_broker'])"]},"source":"19204263894a5652.json","parameterValues":[]}