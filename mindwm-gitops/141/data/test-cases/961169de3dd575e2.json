{"uid":"961169de3dd575e2","name":"test_scenarios[file:features/2_mindwm_crd_resources.feature-MindWM Custom kubernetes resources-Delete Resources and Verify Cleanup]","fullName":"features.2_mindwm_crd_resources#test_scenarios","historyId":"f4451d45bb07c6c75a3acdc42af464df","time":{"start":1726852084309,"stop":1726852212107,"duration":127798},"status":"broken","statusMessage":"kubernetes.client.exceptions.ApiException: (404)\nReason: Not Found\nHTTP response headers: HTTPHeaderDict({'Audit-Id': '98525792-a804-486f-8c7a-330a8db0c42f', 'Cache-Control': 'no-cache, private', 'Content-Type': 'application/json', 'X-Kubernetes-Pf-Flowschema-Uid': '928c1d30-14b2-45c8-ad11-01eb9c32c0ef', 'X-Kubernetes-Pf-Prioritylevel-Uid': '1ff576ae-ed3d-4d35-9b8d-39b075ddbd28', 'Date': 'Fri, 20 Sep 2024 17:10:12 GMT', 'Content-Length': '214'})\nHTTP response body: {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"contexts.mindwm.io \\\"cyan\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"cyan\",\"group\":\"mindwm.io\",\"kind\":\"contexts\"},\"code\":404}","statusTrace":"self = <pytest_bdd.runner.ScenarioRunner object at 0x7a71774f9760>\nitem = <Function test_scenarios[file:features/2_mindwm_crd_resources.feature-MindWM Custom kubernetes resources-Delete Resources and Verify Cleanup]>\n\n    def pytest_runtest_call(self, item: Item):\n        if \"pytest_bdd_scenario\" in list(map(attrgetter(\"name\"), item.iter_markers())):\n            self.request = item._request\n            self.feature = self.request.getfixturevalue(\"feature\")\n            self.scenario = self.request.getfixturevalue(\"scenario\")\n            self.plugin_manager = self.request.config.hook\n            self.plugin_manager.pytest_bdd_before_scenario(\n                request=self.request, feature=self.feature, scenario=self.scenario\n            )\n            try:\n>               self.plugin_manager.pytest_bdd_run_scenario(\n                    request=self.request,\n                    feature=self.feature,\n                    scenario=self.scenario,\n                )\n\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:59: in pytest_bdd_run_scenario\n    return step_dispatcher(steps)\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:69: in dispatcher\n    self.plugin_manager.pytest_bdd_run_step(\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:128: in pytest_bdd_run_step\n    step_result = step_caller()\nconftest.py:154: in mindwm_context_deleted\n    context= mindwm_crd.context_get(kube, context_name)\nmindwm_crd.py:52: in context_get\n    resource = api_instance.get_namespaced_custom_object(\n.venv/lib/python3.12/site-packages/kubernetes/client/api/custom_objects_api.py:1627: in get_namespaced_custom_object\n    return self.get_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, **kwargs)  # noqa: E501\n.venv/lib/python3.12/site-packages/kubernetes/client/api/custom_objects_api.py:1734: in get_namespaced_custom_object_with_http_info\n    return self.api_client.call_api(\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:348: in call_api\n    return self.__call_api(resource_path, method,\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:180: in __call_api\n    response_data = self.request(\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:373: in request\n    return self.rest_client.GET(url,\n.venv/lib/python3.12/site-packages/kubernetes/client/rest.py:244: in GET\n    return self.request(\"GET\", url,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <kubernetes.client.rest.RESTClientObject object at 0x7a71737a5d30>\nmethod = 'GET'\nurl = 'https://127.0.0.1:6443/apis/mindwm.io/v1beta1/namespaces/default/contexts/cyan'\nquery_params = []\nheaders = {'Accept': 'application/json', 'Content-Type': 'application/json', 'User-Agent': 'OpenAPI-Generator/30.1.0/python'}\nbody = None, post_params = {}, _preload_content = True, _request_timeout = None\n\n    def request(self, method, url, query_params=None, headers=None,\n                body=None, post_params=None, _preload_content=True,\n                _request_timeout=None):\n        \"\"\"Perform requests.\n    \n        :param method: http request method\n        :param url: http request url\n        :param query_params: query parameters in the url\n        :param headers: http request headers\n        :param body: request json body, for `application/json`\n        :param post_params: request post parameters,\n                            `application/x-www-form-urlencoded`\n                            and `multipart/form-data`\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        \"\"\"\n        method = method.upper()\n        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',\n                          'PATCH', 'OPTIONS']\n    \n        if post_params and body:\n            raise ApiValueError(\n                \"body parameter cannot be used with post_params parameter.\"\n            )\n    \n        post_params = post_params or {}\n        headers = headers or {}\n    \n        timeout = None\n        if _request_timeout:\n            if isinstance(_request_timeout, (int, ) if six.PY3 else (int, long)):  # noqa: E501,F821\n                timeout = urllib3.Timeout(total=_request_timeout)\n            elif (isinstance(_request_timeout, tuple) and\n                  len(_request_timeout) == 2):\n                timeout = urllib3.Timeout(\n                    connect=_request_timeout[0], read=_request_timeout[1])\n    \n        if 'Content-Type' not in headers:\n            headers['Content-Type'] = 'application/json'\n    \n        try:\n            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:\n                if query_params:\n                    url += '?' + urlencode(query_params)\n                if (re.search('json', headers['Content-Type'], re.IGNORECASE) or\n                        headers['Content-Type'] == 'application/apply-patch+yaml'):\n                    if headers['Content-Type'] == 'application/json-patch+json':\n                        if not isinstance(body, list):\n                            headers['Content-Type'] = \\\n                                'application/strategic-merge-patch+json'\n                    request_body = None\n                    if body is not None:\n                        request_body = json.dumps(body)\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=False,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'multipart/form-data':\n                    # must del headers['Content-Type'], or the correct\n                    # Content-Type which generated by urllib3 will be\n                    # overwritten.\n                    del headers['Content-Type']\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=True,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                # Pass a `string` parameter directly in the body to support\n                # other content types than Json when `body` argument is\n                # provided in serialized form\n                elif isinstance(body, str) or isinstance(body, bytes):\n                    request_body = body\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                else:\n                    # Cannot generate the request from given parameters\n                    msg = \"\"\"Cannot prepare a request message for provided\n                             arguments. Please check that your arguments match\n                             declared content type.\"\"\"\n                    raise ApiException(status=0, reason=msg)\n            # For `GET`, `HEAD`\n            else:\n                r = self.pool_manager.request(method, url,\n                                              fields=query_params,\n                                              preload_content=_preload_content,\n                                              timeout=timeout,\n                                              headers=headers)\n        except urllib3.exceptions.SSLError as e:\n            msg = \"{0}\\n{1}\".format(type(e).__name__, str(e))\n            raise ApiException(status=0, reason=msg)\n    \n        if _preload_content:\n            r = RESTResponse(r)\n    \n            # In the python 3, the response.data is bytes.\n            # we need to decode it to string.\n            if six.PY3:\n                r.data = r.data.decode('utf8')\n    \n            # log response body\n            logger.debug(\"response body: %s\", r.data)\n    \n        if not 200 <= r.status <= 299:\n>           raise ApiException(http_resp=r)\nE           kubernetes.client.exceptions.ApiException: (404)\nE           Reason: Not Found\nE           HTTP response headers: HTTPHeaderDict({'Audit-Id': '98525792-a804-486f-8c7a-330a8db0c42f', 'Cache-Control': 'no-cache, private', 'Content-Type': 'application/json', 'X-Kubernetes-Pf-Flowschema-Uid': '928c1d30-14b2-45c8-ad11-01eb9c32c0ef', 'X-Kubernetes-Pf-Prioritylevel-Uid': '1ff576ae-ed3d-4d35-9b8d-39b075ddbd28', 'Date': 'Fri, 20 Sep 2024 17:10:12 GMT', 'Content-Length': '214'})\nE           HTTP response body: {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"contexts.mindwm.io \\\"cyan\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"cyan\",\"group\":\"mindwm.io\",\"kind\":\"contexts\"},\"code\":404}\n\n.venv/lib/python3.12/site-packages/kubernetes/client/rest.py:238: ApiException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1726850969985,"stop":1726850969985,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_registry","time":{"start":1726852084309,"stop":1726852084309,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"steps_left","time":{"start":1726852084309,"stop":1726852084309,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_registry","time":{"start":1726852084309,"stop":1726852084309,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"parameter_type_registry","time":{"start":1726852084310,"stop":1726852084310,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_matcher","time":{"start":1726852084310,"stop":1726852084310,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubecontext","time":{"start":1726852084311,"stop":1726852084311,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kube","time":{"start":1726852084311,"stop":1726852084315,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubeconfig","time":{"start":1726852084311,"stop":1726852084311,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"kubernetes.client.exceptions.ApiException: (404)\nReason: Not Found\nHTTP response headers: HTTPHeaderDict({'Audit-Id': '98525792-a804-486f-8c7a-330a8db0c42f', 'Cache-Control': 'no-cache, private', 'Content-Type': 'application/json', 'X-Kubernetes-Pf-Flowschema-Uid': '928c1d30-14b2-45c8-ad11-01eb9c32c0ef', 'X-Kubernetes-Pf-Prioritylevel-Uid': '1ff576ae-ed3d-4d35-9b8d-39b075ddbd28', 'Date': 'Fri, 20 Sep 2024 17:10:12 GMT', 'Content-Length': '214'})\nHTTP response body: {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"contexts.mindwm.io \\\"cyan\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"cyan\",\"group\":\"mindwm.io\",\"kind\":\"contexts\"},\"code\":404}","statusTrace":"self = <pytest_bdd.runner.ScenarioRunner object at 0x7a71774f9760>\nitem = <Function test_scenarios[file:features/2_mindwm_crd_resources.feature-MindWM Custom kubernetes resources-Delete Resources and Verify Cleanup]>\n\n    def pytest_runtest_call(self, item: Item):\n        if \"pytest_bdd_scenario\" in list(map(attrgetter(\"name\"), item.iter_markers())):\n            self.request = item._request\n            self.feature = self.request.getfixturevalue(\"feature\")\n            self.scenario = self.request.getfixturevalue(\"scenario\")\n            self.plugin_manager = self.request.config.hook\n            self.plugin_manager.pytest_bdd_before_scenario(\n                request=self.request, feature=self.feature, scenario=self.scenario\n            )\n            try:\n>               self.plugin_manager.pytest_bdd_run_scenario(\n                    request=self.request,\n                    feature=self.feature,\n                    scenario=self.scenario,\n                )\n\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:59: in pytest_bdd_run_scenario\n    return step_dispatcher(steps)\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:69: in dispatcher\n    self.plugin_manager.pytest_bdd_run_step(\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:128: in pytest_bdd_run_step\n    step_result = step_caller()\nconftest.py:154: in mindwm_context_deleted\n    context= mindwm_crd.context_get(kube, context_name)\nmindwm_crd.py:52: in context_get\n    resource = api_instance.get_namespaced_custom_object(\n.venv/lib/python3.12/site-packages/kubernetes/client/api/custom_objects_api.py:1627: in get_namespaced_custom_object\n    return self.get_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, **kwargs)  # noqa: E501\n.venv/lib/python3.12/site-packages/kubernetes/client/api/custom_objects_api.py:1734: in get_namespaced_custom_object_with_http_info\n    return self.api_client.call_api(\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:348: in call_api\n    return self.__call_api(resource_path, method,\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:180: in __call_api\n    response_data = self.request(\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:373: in request\n    return self.rest_client.GET(url,\n.venv/lib/python3.12/site-packages/kubernetes/client/rest.py:244: in GET\n    return self.request(\"GET\", url,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <kubernetes.client.rest.RESTClientObject object at 0x7a71737a5d30>\nmethod = 'GET'\nurl = 'https://127.0.0.1:6443/apis/mindwm.io/v1beta1/namespaces/default/contexts/cyan'\nquery_params = []\nheaders = {'Accept': 'application/json', 'Content-Type': 'application/json', 'User-Agent': 'OpenAPI-Generator/30.1.0/python'}\nbody = None, post_params = {}, _preload_content = True, _request_timeout = None\n\n    def request(self, method, url, query_params=None, headers=None,\n                body=None, post_params=None, _preload_content=True,\n                _request_timeout=None):\n        \"\"\"Perform requests.\n    \n        :param method: http request method\n        :param url: http request url\n        :param query_params: query parameters in the url\n        :param headers: http request headers\n        :param body: request json body, for `application/json`\n        :param post_params: request post parameters,\n                            `application/x-www-form-urlencoded`\n                            and `multipart/form-data`\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        \"\"\"\n        method = method.upper()\n        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',\n                          'PATCH', 'OPTIONS']\n    \n        if post_params and body:\n            raise ApiValueError(\n                \"body parameter cannot be used with post_params parameter.\"\n            )\n    \n        post_params = post_params or {}\n        headers = headers or {}\n    \n        timeout = None\n        if _request_timeout:\n            if isinstance(_request_timeout, (int, ) if six.PY3 else (int, long)):  # noqa: E501,F821\n                timeout = urllib3.Timeout(total=_request_timeout)\n            elif (isinstance(_request_timeout, tuple) and\n                  len(_request_timeout) == 2):\n                timeout = urllib3.Timeout(\n                    connect=_request_timeout[0], read=_request_timeout[1])\n    \n        if 'Content-Type' not in headers:\n            headers['Content-Type'] = 'application/json'\n    \n        try:\n            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:\n                if query_params:\n                    url += '?' + urlencode(query_params)\n                if (re.search('json', headers['Content-Type'], re.IGNORECASE) or\n                        headers['Content-Type'] == 'application/apply-patch+yaml'):\n                    if headers['Content-Type'] == 'application/json-patch+json':\n                        if not isinstance(body, list):\n                            headers['Content-Type'] = \\\n                                'application/strategic-merge-patch+json'\n                    request_body = None\n                    if body is not None:\n                        request_body = json.dumps(body)\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=False,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'multipart/form-data':\n                    # must del headers['Content-Type'], or the correct\n                    # Content-Type which generated by urllib3 will be\n                    # overwritten.\n                    del headers['Content-Type']\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=True,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                # Pass a `string` parameter directly in the body to support\n                # other content types than Json when `body` argument is\n                # provided in serialized form\n                elif isinstance(body, str) or isinstance(body, bytes):\n                    request_body = body\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                else:\n                    # Cannot generate the request from given parameters\n                    msg = \"\"\"Cannot prepare a request message for provided\n                             arguments. Please check that your arguments match\n                             declared content type.\"\"\"\n                    raise ApiException(status=0, reason=msg)\n            # For `GET`, `HEAD`\n            else:\n                r = self.pool_manager.request(method, url,\n                                              fields=query_params,\n                                              preload_content=_preload_content,\n                                              timeout=timeout,\n                                              headers=headers)\n        except urllib3.exceptions.SSLError as e:\n            msg = \"{0}\\n{1}\".format(type(e).__name__, str(e))\n            raise ApiException(status=0, reason=msg)\n    \n        if _preload_content:\n            r = RESTResponse(r)\n    \n            # In the python 3, the response.data is bytes.\n            # we need to decode it to string.\n            if six.PY3:\n                r.data = r.data.decode('utf8')\n    \n            # log response body\n            logger.debug(\"response body: %s\", r.data)\n    \n        if not 200 <= r.status <= 299:\n>           raise ApiException(http_resp=r)\nE           kubernetes.client.exceptions.ApiException: (404)\nE           Reason: Not Found\nE           HTTP response headers: HTTPHeaderDict({'Audit-Id': '98525792-a804-486f-8c7a-330a8db0c42f', 'Cache-Control': 'no-cache, private', 'Content-Type': 'application/json', 'X-Kubernetes-Pf-Flowschema-Uid': '928c1d30-14b2-45c8-ad11-01eb9c32c0ef', 'X-Kubernetes-Pf-Prioritylevel-Uid': '1ff576ae-ed3d-4d35-9b8d-39b075ddbd28', 'Date': 'Fri, 20 Sep 2024 17:10:12 GMT', 'Content-Length': '214'})\nE           HTTP response body: {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"contexts.mindwm.io \\\"cyan\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"cyan\",\"group\":\"mindwm.io\",\"kind\":\"contexts\"},\"code\":404}\n\n.venv/lib/python3.12/site-packages/kubernetes/client/rest.py:238: ApiException","steps":[{"name":"Mindwm crd 'xcontexts' is exists","time":{"start":1726852084330,"stop":1726852084330,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Mindwm crd 'xhosts' is exists","time":{"start":1726852084337,"stop":1726852084337,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Mindwm crd 'xusers' is exists","time":{"start":1726852084343,"stop":1726852084343,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Kubernetes node 'localhost' is True","time":{"start":1726852084365,"stop":1726852084365,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Namespace 'user-bob' deleted","time":{"start":1726852212061,"stop":1726852212062,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"scenarios(PosixPath('/home/ci/mindwm-gitops/tests/mindwm_bdd/features/2_mindwm_crd_resources.feature'), filter_=None, encoding='utf-8', features_base_dir=None, features_base_url=None, features_path_type=None, features_mimetype=None, parser_type=None, parse_args=Args(args=(), kwargs={}), locators=())"},{"name":"tag","value":"@pytest.mark.usefixtures('feature', 'scenario', 'feature_source')"},{"name":"tag","value":"pytest_bdd_scenario"},{"name":"tag","value":"crd_resources"},{"name":"tag","value":"namespace(create=False, name='default')"},{"name":"parentSuite","value":"features"},{"name":"suite","value":"2_mindwm_crd_resources"},{"name":"host","value":"localhost"},{"name":"thread","value":"4439-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"features.2_mindwm_crd_resources"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"feature","value":"Feature(gherkin_document=GherkinDocument(uri='file:features/2_mindwm_crd_resources.feature', feature=Feature(location=Location(line=2, column=1), tags=[Tag(location=Location(line=1, column=1), name='@crd_resources', id='251')], language='en', keyword='Feature', name='MindWM Custom kubernetes resources', description='', children=[FeatureChild(rule=None, background=Background(location=Location(line=4, column=3), keyword='Background', name='', description='', steps=[Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='193'), Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready', doc_string=None, data_table=None, id='194')], id='195'), scenario=None), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=8, column=3), tags=[], keyword='Scenario', name='Create Context and check k8s resources', description='', steps=[Step(location=Location(line=9, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"cyan\"', doc_string=None, data_table=None, id='196'), Step(location=Location(line=10, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='197'), Step(location=Location(line=11, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should exists', doc_string=None, data_table=None, id='198'), Step(location=Location(line=12, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace', doc_string=None, data_table=None, id='199'), Step(location=Location(line=13, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state', doc_string=None, data_table=None, id='200'), Step(location=Location(line=14, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative service is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=15, column=7), rows=[TableRow(location=Location(line=15, column=7), cells=[TableCell(location=Location(line=15, column=9), value='Knative service name')], id='201'), TableRow(location=Location(line=16, column=7), cells=[TableCell(location=Location(line=16, column=9), value='dead-letter')], id='202'), TableRow(location=Location(line=17, column=7), cells=[TableCell(location=Location(line=17, column=9), value='iocontext')], id='203'), TableRow(location=Location(line=18, column=7), cells=[TableCell(location=Location(line=18, column=9), value='kafka-cdc')], id='204'), TableRow(location=Location(line=19, column=7), cells=[TableCell(location=Location(line=19, column=9), value='pong')], id='205')]), id='206'), Step(location=Location(line=20, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=21, column=7), rows=[TableRow(location=Location(line=21, column=7), cells=[TableCell(location=Location(line=21, column=9), value='Knative trigger name')], id='207'), TableRow(location=Location(line=22, column=7), cells=[TableCell(location=Location(line=22, column=9), value='iocontext-trigger')], id='208'), TableRow(location=Location(line=23, column=7), cells=[TableCell(location=Location(line=23, column=9), value='kafka-cdc-trigger')], id='209'), TableRow(location=Location(line=24, column=7), cells=[TableCell(location=Location(line=24, column=9), value='pong-trigger')], id='210')]), id='211'), Step(location=Location(line=25, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=26, column=7), rows=[TableRow(location=Location(line=26, column=7), cells=[TableCell(location=Location(line=26, column=9), value='Knative broker name')], id='212'), TableRow(location=Location(line=27, column=7), cells=[TableCell(location=Location(line=27, column=9), value='context-broker')], id='213')]), id='214'), Step(location=Location(line=28, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace', doc_string=None, data_table=None, id='215'), Step(location=Location(line=29, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=None, id='216')], examples=[], id='217')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=31, column=3), tags=[], keyword='Scenario', name='Create User and check k8s resources', description='', steps=[Step(location=Location(line=32, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"', doc_string=None, data_table=None, id='218'), Step(location=Location(line=33, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='219'), Step(location=Location(line=34, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should exists', doc_string=None, data_table=None, id='220'), Step(location=Location(line=35, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=36, column=7), rows=[TableRow(location=Location(line=36, column=7), cells=[TableCell(location=Location(line=36, column=9), value='Knative broker name')], id='221'), TableRow(location=Location(line=37, column=7), cells=[TableCell(location=Location(line=37, column=9), value='user-broker')], id='222')]), id='223'), Step(location=Location(line=38, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=39, column=7), rows=[TableRow(location=Location(line=39, column=7), cells=[TableCell(location=Location(line=39, column=9), value='Knative trigger name')], id='224'), TableRow(location=Location(line=40, column=7), cells=[TableCell(location=Location(line=40, column=9), value='context-cyan-to-user-bob')], id='225')]), id='226'), Step(location=Location(line=41, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=42, column=7), rows=[TableRow(location=Location(line=42, column=7), cells=[TableCell(location=Location(line=42, column=9), value='Knative trigger name')], id='227'), TableRow(location=Location(line=43, column=7), cells=[TableCell(location=Location(line=43, column=9), value='user-bob-to-context-cyan')], id='228')]), id='229')], examples=[], id='230')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=45, column=3), tags=[], keyword='Scenario', name='Create Host and check k8s resources', description='', steps=[Step(location=Location(line=46, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"', doc_string=None, data_table=None, id='231'), Step(location=Location(line=47, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='232'), Step(location=Location(line=48, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace', doc_string=None, data_table=None, id='233'), Step(location=Location(line=49, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=50, column=7), rows=[TableRow(location=Location(line=50, column=7), cells=[TableCell(location=Location(line=50, column=9), value='Knative trigger name')], id='234'), TableRow(location=Location(line=51, column=7), cells=[TableCell(location=Location(line=51, column=9), value='user-bob-to-context-cyan')], id='235'), TableRow(location=Location(line=52, column=7), cells=[TableCell(location=Location(line=52, column=9), value='user-broker-to-workstation-broker-trigger')], id='236')]), id='237'), Step(location=Location(line=53, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=54, column=7), rows=[TableRow(location=Location(line=54, column=7), cells=[TableCell(location=Location(line=54, column=9), value='Knative broker name')], id='238'), TableRow(location=Location(line=55, column=7), cells=[TableCell(location=Location(line=55, column=9), value='workstation-host-broker')], id='239')]), id='240')], examples=[], id='241')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=59, column=3), tags=[], keyword='Scenario', name='Delete Resources and Verify Cleanup', description='', steps=[Step(location=Location(line=61, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"', doc_string=None, data_table=None, id='242'), Step(location=Location(line=62, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted', doc_string=None, data_table=None, id='243'), Step(location=Location(line=64, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"', doc_string=None, data_table=None, id='244'), Step(location=Location(line=65, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"bob\" should be deleted', doc_string=None, data_table=None, id='245'), Step(location=Location(line=66, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should not exists', doc_string=None, data_table=None, id='246'), Step(location=Location(line=68, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"', doc_string=None, data_table=None, id='247'), Step(location=Location(line=69, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted', doc_string=None, data_table=None, id='248'), Step(location=Location(line=70, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should not exists', doc_string=None, data_table=None, id='249')], examples=[], id='250'))]), comments=[]), uri='file:features/2_mindwm_crd_resources.feature', filename='/home/ci/mindwm-gitops/tests/mindwm_bdd/features/2_mindwm_crd_resources.feature', registry={'251': Tag(location=Location(line=1, column=1), name='@crd_resources', id='251'), '195': Background(location=Location(line=4, column=3), keyword='Background', name='', description='', steps=[Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='193'), Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready', doc_string=None, data_table=None, id='194')], id='195'), '193': Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='193'), '194': Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready', doc_string=None, data_table=None, id='194'), '217': Scenario(location=Location(line=8, column=3), tags=[], keyword='Scenario', name='Create Context and check k8s resources', description='', steps=[Step(location=Location(line=9, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"cyan\"', doc_string=None, data_table=None, id='196'), Step(location=Location(line=10, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='197'), Step(location=Location(line=11, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should exists', doc_string=None, data_table=None, id='198'), Step(location=Location(line=12, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace', doc_string=None, data_table=None, id='199'), Step(location=Location(line=13, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state', doc_string=None, data_table=None, id='200'), Step(location=Location(line=14, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative service is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=15, column=7), rows=[TableRow(location=Location(line=15, column=7), cells=[TableCell(location=Location(line=15, column=9), value='Knative service name')], id='201'), TableRow(location=Location(line=16, column=7), cells=[TableCell(location=Location(line=16, column=9), value='dead-letter')], id='202'), TableRow(location=Location(line=17, column=7), cells=[TableCell(location=Location(line=17, column=9), value='iocontext')], id='203'), TableRow(location=Location(line=18, column=7), cells=[TableCell(location=Location(line=18, column=9), value='kafka-cdc')], id='204'), TableRow(location=Location(line=19, column=7), cells=[TableCell(location=Location(line=19, column=9), value='pong')], id='205')]), id='206'), Step(location=Location(line=20, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=21, column=7), rows=[TableRow(location=Location(line=21, column=7), cells=[TableCell(location=Location(line=21, column=9), value='Knative trigger name')], id='207'), TableRow(location=Location(line=22, column=7), cells=[TableCell(location=Location(line=22, column=9), value='iocontext-trigger')], id='208'), TableRow(location=Location(line=23, column=7), cells=[TableCell(location=Location(line=23, column=9), value='kafka-cdc-trigger')], id='209'), TableRow(location=Location(line=24, column=7), cells=[TableCell(location=Location(line=24, column=9), value='pong-trigger')], id='210')]), id='211'), Step(location=Location(line=25, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=26, column=7), rows=[TableRow(location=Location(line=26, column=7), cells=[TableCell(location=Location(line=26, column=9), value='Knative broker name')], id='212'), TableRow(location=Location(line=27, column=7), cells=[TableCell(location=Location(line=27, column=9), value='context-broker')], id='213')]), id='214'), Step(location=Location(line=28, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace', doc_string=None, data_table=None, id='215'), Step(location=Location(line=29, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=None, id='216')], examples=[], id='217'), '196': Step(location=Location(line=9, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"cyan\"', doc_string=None, data_table=None, id='196'), '197': Step(location=Location(line=10, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='197'), '198': Step(location=Location(line=11, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should exists', doc_string=None, data_table=None, id='198'), '199': Step(location=Location(line=12, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace', doc_string=None, data_table=None, id='199'), '200': Step(location=Location(line=13, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state', doc_string=None, data_table=None, id='200'), '206': Step(location=Location(line=14, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative service is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=15, column=7), rows=[TableRow(location=Location(line=15, column=7), cells=[TableCell(location=Location(line=15, column=9), value='Knative service name')], id='201'), TableRow(location=Location(line=16, column=7), cells=[TableCell(location=Location(line=16, column=9), value='dead-letter')], id='202'), TableRow(location=Location(line=17, column=7), cells=[TableCell(location=Location(line=17, column=9), value='iocontext')], id='203'), TableRow(location=Location(line=18, column=7), cells=[TableCell(location=Location(line=18, column=9), value='kafka-cdc')], id='204'), TableRow(location=Location(line=19, column=7), cells=[TableCell(location=Location(line=19, column=9), value='pong')], id='205')]), id='206'), '211': Step(location=Location(line=20, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=21, column=7), rows=[TableRow(location=Location(line=21, column=7), cells=[TableCell(location=Location(line=21, column=9), value='Knative trigger name')], id='207'), TableRow(location=Location(line=22, column=7), cells=[TableCell(location=Location(line=22, column=9), value='iocontext-trigger')], id='208'), TableRow(location=Location(line=23, column=7), cells=[TableCell(location=Location(line=23, column=9), value='kafka-cdc-trigger')], id='209'), TableRow(location=Location(line=24, column=7), cells=[TableCell(location=Location(line=24, column=9), value='pong-trigger')], id='210')]), id='211'), '214': Step(location=Location(line=25, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=26, column=7), rows=[TableRow(location=Location(line=26, column=7), cells=[TableCell(location=Location(line=26, column=9), value='Knative broker name')], id='212'), TableRow(location=Location(line=27, column=7), cells=[TableCell(location=Location(line=27, column=9), value='context-broker')], id='213')]), id='214'), '215': Step(location=Location(line=28, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace', doc_string=None, data_table=None, id='215'), '216': Step(location=Location(line=29, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=None, id='216'), '230': Scenario(location=Location(line=31, column=3), tags=[], keyword='Scenario', name='Create User and check k8s resources', description='', steps=[Step(location=Location(line=32, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"', doc_string=None, data_table=None, id='218'), Step(location=Location(line=33, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='219'), Step(location=Location(line=34, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should exists', doc_string=None, data_table=None, id='220'), Step(location=Location(line=35, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=36, column=7), rows=[TableRow(location=Location(line=36, column=7), cells=[TableCell(location=Location(line=36, column=9), value='Knative broker name')], id='221'), TableRow(location=Location(line=37, column=7), cells=[TableCell(location=Location(line=37, column=9), value='user-broker')], id='222')]), id='223'), Step(location=Location(line=38, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=39, column=7), rows=[TableRow(location=Location(line=39, column=7), cells=[TableCell(location=Location(line=39, column=9), value='Knative trigger name')], id='224'), TableRow(location=Location(line=40, column=7), cells=[TableCell(location=Location(line=40, column=9), value='context-cyan-to-user-bob')], id='225')]), id='226'), Step(location=Location(line=41, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=42, column=7), rows=[TableRow(location=Location(line=42, column=7), cells=[TableCell(location=Location(line=42, column=9), value='Knative trigger name')], id='227'), TableRow(location=Location(line=43, column=7), cells=[TableCell(location=Location(line=43, column=9), value='user-bob-to-context-cyan')], id='228')]), id='229')], examples=[], id='230'), '218': Step(location=Location(line=32, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"', doc_string=None, data_table=None, id='218'), '219': Step(location=Location(line=33, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='219'), '220': Step(location=Location(line=34, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should exists', doc_string=None, data_table=None, id='220'), '223': Step(location=Location(line=35, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=36, column=7), rows=[TableRow(location=Location(line=36, column=7), cells=[TableCell(location=Location(line=36, column=9), value='Knative broker name')], id='221'), TableRow(location=Location(line=37, column=7), cells=[TableCell(location=Location(line=37, column=9), value='user-broker')], id='222')]), id='223'), '226': Step(location=Location(line=38, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=39, column=7), rows=[TableRow(location=Location(line=39, column=7), cells=[TableCell(location=Location(line=39, column=9), value='Knative trigger name')], id='224'), TableRow(location=Location(line=40, column=7), cells=[TableCell(location=Location(line=40, column=9), value='context-cyan-to-user-bob')], id='225')]), id='226'), '229': Step(location=Location(line=41, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=42, column=7), rows=[TableRow(location=Location(line=42, column=7), cells=[TableCell(location=Location(line=42, column=9), value='Knative trigger name')], id='227'), TableRow(location=Location(line=43, column=7), cells=[TableCell(location=Location(line=43, column=9), value='user-bob-to-context-cyan')], id='228')]), id='229'), '241': Scenario(location=Location(line=45, column=3), tags=[], keyword='Scenario', name='Create Host and check k8s resources', description='', steps=[Step(location=Location(line=46, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"', doc_string=None, data_table=None, id='231'), Step(location=Location(line=47, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='232'), Step(location=Location(line=48, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace', doc_string=None, data_table=None, id='233'), Step(location=Location(line=49, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=50, column=7), rows=[TableRow(location=Location(line=50, column=7), cells=[TableCell(location=Location(line=50, column=9), value='Knative trigger name')], id='234'), TableRow(location=Location(line=51, column=7), cells=[TableCell(location=Location(line=51, column=9), value='user-bob-to-context-cyan')], id='235'), TableRow(location=Location(line=52, column=7), cells=[TableCell(location=Location(line=52, column=9), value='user-broker-to-workstation-broker-trigger')], id='236')]), id='237'), Step(location=Location(line=53, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=54, column=7), rows=[TableRow(location=Location(line=54, column=7), cells=[TableCell(location=Location(line=54, column=9), value='Knative broker name')], id='238'), TableRow(location=Location(line=55, column=7), cells=[TableCell(location=Location(line=55, column=9), value='workstation-host-broker')], id='239')]), id='240')], examples=[], id='241'), '231': Step(location=Location(line=46, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"', doc_string=None, data_table=None, id='231'), '232': Step(location=Location(line=47, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='232'), '233': Step(location=Location(line=48, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace', doc_string=None, data_table=None, id='233'), '237': Step(location=Location(line=49, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=50, column=7), rows=[TableRow(location=Location(line=50, column=7), cells=[TableCell(location=Location(line=50, column=9), value='Knative trigger name')], id='234'), TableRow(location=Location(line=51, column=7), cells=[TableCell(location=Location(line=51, column=9), value='user-bob-to-context-cyan')], id='235'), TableRow(location=Location(line=52, column=7), cells=[TableCell(location=Location(line=52, column=9), value='user-broker-to-workstation-broker-trigger')], id='236')]), id='237'), '240': Step(location=Location(line=53, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=54, column=7), rows=[TableRow(location=Location(line=54, column=7), cells=[TableCell(location=Location(line=54, column=9), value='Knative broker name')], id='238'), TableRow(location=Location(line=55, column=7), cells=[TableCell(location=Location(line=55, column=9), value='workstation-host-broker')], id='239')]), id='240'), '250': Scenario(location=Location(line=59, column=3), tags=[], keyword='Scenario', name='Delete Resources and Verify Cleanup', description='', steps=[Step(location=Location(line=61, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"', doc_string=None, data_table=None, id='242'), Step(location=Location(line=62, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted', doc_string=None, data_table=None, id='243'), Step(location=Location(line=64, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"', doc_string=None, data_table=None, id='244'), Step(location=Location(line=65, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"bob\" should be deleted', doc_string=None, data_table=None, id='245'), Step(location=Location(line=66, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should not exists', doc_string=None, data_table=None, id='246'), Step(location=Location(line=68, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"', doc_string=None, data_table=None, id='247'), Step(location=Location(line=69, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted', doc_string=None, data_table=None, id='248'), Step(location=Location(line=70, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should not exists', doc_string=None, data_table=None, id='249')], examples=[], id='250'), '242': Step(location=Location(line=61, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"', doc_string=None, data_table=None, id='242'), '243': Step(location=Location(line=62, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted', doc_string=None, data_table=None, id='243'), '244': Step(location=Location(line=64, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"', doc_string=None, data_table=None, id='244'), '245': Step(location=Location(line=65, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"bob\" should be deleted', doc_string=None, data_table=None, id='245'), '246': Step(location=Location(line=66, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should not exists', doc_string=None, data_table=None, id='246'), '247': Step(location=Location(line=68, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"', doc_string=None, data_table=None, id='247'), '248': Step(location=Location(line=69, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted', doc_string=None, data_table=None, id='248'), '249': Step(location=Location(line=70, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should not exists', doc_string=None, data_table=None, id='249')}, pickles=[Pickle(id='264', uri='file:features/2_mindwm_crd_resources.feature', name='Create Context and check k8s resources', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='252', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='253', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['196'], id='254', type=<Type.action: 'Action'>, text='God creates a MindWM context with the name \"cyan\"'), PickleStep(argument=None, ast_node_ids=['197'], id='255', type=<Type.outcome: 'Outcome'>, text='the context should be ready and operable'), PickleStep(argument=None, ast_node_ids=['198'], id='256', type=<Type.outcome: 'Outcome'>, text='namespace \"context-cyan\" should exists'), PickleStep(argument=None, ast_node_ids=['199'], id='257', type=<Type.outcome: 'Outcome'>, text='helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace'), PickleStep(argument=None, ast_node_ids=['200'], id='258', type=<Type.outcome: 'Outcome'>, text='statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative service name')]), PickleTableRow(cells=[PickleTableCell(value='dead-letter')]), PickleTableRow(cells=[PickleTableCell(value='iocontext')]), PickleTableRow(cells=[PickleTableCell(value='kafka-cdc')]), PickleTableRow(cells=[PickleTableCell(value='pong')])])), ast_node_ids=['206'], id='259', type=<Type.outcome: 'Outcome'>, text='following knative service is in ready state in \"context-cyan\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative trigger name')]), PickleTableRow(cells=[PickleTableCell(value='iocontext-trigger')]), PickleTableRow(cells=[PickleTableCell(value='kafka-cdc-trigger')]), PickleTableRow(cells=[PickleTableCell(value='pong-trigger')])])), ast_node_ids=['211'], id='260', type=<Type.outcome: 'Outcome'>, text='following knative triggers is in ready state in \"context-cyan\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative broker name')]), PickleTableRow(cells=[PickleTableCell(value='context-broker')])])), ast_node_ids=['214'], id='261', type=<Type.outcome: 'Outcome'>, text='following knative brokers is in ready state in \"context-cyan\" namespace'), PickleStep(argument=None, ast_node_ids=['215'], id='262', type=<Type.outcome: 'Outcome'>, text='kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace'), PickleStep(argument=None, ast_node_ids=['216'], id='263', type=<Type.outcome: 'Outcome'>, text='kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['217']), Pickle(id='273', uri='file:features/2_mindwm_crd_resources.feature', name='Create User and check k8s resources', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='265', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='266', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['218'], id='267', type=<Type.action: 'Action'>, text='God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"'), PickleStep(argument=None, ast_node_ids=['219'], id='268', type=<Type.outcome: 'Outcome'>, text='the user resource should be ready and operable'), PickleStep(argument=None, ast_node_ids=['220'], id='269', type=<Type.outcome: 'Outcome'>, text='namespace \"user-bob\" should exists'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative broker name')]), PickleTableRow(cells=[PickleTableCell(value='user-broker')])])), ast_node_ids=['223'], id='270', type=<Type.outcome: 'Outcome'>, text='following knative brokers is in ready state in \"user-bob\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative trigger name')]), PickleTableRow(cells=[PickleTableCell(value='context-cyan-to-user-bob')])])), ast_node_ids=['226'], id='271', type=<Type.outcome: 'Outcome'>, text='following knative triggers is in ready state in \"context-cyan\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative trigger name')]), PickleTableRow(cells=[PickleTableCell(value='user-bob-to-context-cyan')])])), ast_node_ids=['229'], id='272', type=<Type.outcome: 'Outcome'>, text='following knative triggers is in ready state in \"user-bob\" namespace')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['230']), Pickle(id='281', uri='file:features/2_mindwm_crd_resources.feature', name='Create Host and check k8s resources', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='274', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='275', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['231'], id='276', type=<Type.action: 'Action'>, text='God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"'), PickleStep(argument=None, ast_node_ids=['232'], id='277', type=<Type.outcome: 'Outcome'>, text='the host resource should be ready and operable'), PickleStep(argument=None, ast_node_ids=['233'], id='278', type=<Type.outcome: 'Outcome'>, text='NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative trigger name')]), PickleTableRow(cells=[PickleTableCell(value='user-bob-to-context-cyan')]), PickleTableRow(cells=[PickleTableCell(value='user-broker-to-workstation-broker-trigger')])])), ast_node_ids=['237'], id='279', type=<Type.outcome: 'Outcome'>, text='following knative triggers is in ready state in \"user-bob\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative broker name')]), PickleTableRow(cells=[PickleTableCell(value='workstation-host-broker')])])), ast_node_ids=['240'], id='280', type=<Type.outcome: 'Outcome'>, text='following knative brokers is in ready state in \"user-bob\" namespace')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['241']), Pickle(id='292', uri='file:features/2_mindwm_crd_resources.feature', name='Delete Resources and Verify Cleanup', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='282', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='283', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['242'], id='284', type=<Type.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"'), PickleStep(argument=None, ast_node_ids=['243'], id='285', type=<Type.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted'), PickleStep(argument=None, ast_node_ids=['244'], id='286', type=<Type.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"'), PickleStep(argument=None, ast_node_ids=['245'], id='287', type=<Type.outcome: 'Outcome'>, text='the user \"bob\" should be deleted'), PickleStep(argument=None, ast_node_ids=['246'], id='288', type=<Type.outcome: 'Outcome'>, text='namespace \"user-bob\" should not exists'), PickleStep(argument=None, ast_node_ids=['247'], id='289', type=<Type.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"'), PickleStep(argument=None, ast_node_ids=['248'], id='290', type=<Type.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted'), PickleStep(argument=None, ast_node_ids=['249'], id='291', type=<Type.outcome: 'Outcome'>, text='namespace \"context-cyan\" should not exists')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['250'])])"},{"name":"feature_source","value":"Source(uri='file:features/2_mindwm_crd_resources.feature', data='@crd_resources\\nFeature: MindWM Custom kubernetes resources\\n\\n  Background:\\n    Given a MindWM environment\\n    Then all nodes in Kubernetes are ready\\n    \\n  Scenario: Create Context and check k8s resources\\n    When God creates a MindWM context with the name \"cyan\"\\n    Then the context should be ready and operable\\n    And namespace \"context-cyan\" should exists \\n    And helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace\\n    And statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state\\n    And following knative service is in ready state in \"context-cyan\" namespace\\n      | Knative service name |\\n      | dead-letter          |\\n      | iocontext            |\\n      | kafka-cdc            |\\n      | pong                 |\\n    And following knative triggers is in ready state in \"context-cyan\" namespace\\n      | Knative trigger name |\\n      | iocontext-trigger    |\\n      | kafka-cdc-trigger    |\\n      | pong-trigger         |\\n    And following knative brokers is in ready state in \"context-cyan\" namespace\\n      | Knative broker name |\\n      | context-broker      |\\n    And kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace\\n    And kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace\\n  \\n  Scenario: Create User and check k8s resources\\n    When God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"\\n    Then the user resource should be ready and operable\\n    And namespace \"user-bob\" should exists \\n    And following knative brokers is in ready state in \"user-bob\" namespace\\n      | Knative broker name |\\n      | user-broker         |\\n    And following knative triggers is in ready state in \"context-cyan\" namespace\\n      | Knative trigger name          |\\n      | context-cyan-to-user-bob    |\\n    And following knative triggers is in ready state in \"user-bob\" namespace\\n      | Knative trigger name          |\\n      | user-bob-to-context-cyan    |\\n\\n  Scenario: Create Host and check k8s resources\\n    When God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"\\n    Then the host resource should be ready and operable\\n    And NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace\\n    And following knative triggers is in ready state in \"user-bob\" namespace\\n      | Knative trigger name                    |\\n      | user-bob-to-context-cyan              |\\n      | user-broker-to-workstation-broker-trigger    |\\n    And following knative brokers is in ready state in \"user-bob\" namespace\\n      | Knative broker name  |\\n      | workstation-host-broker   |\\n\\n\\n\\n  Scenario: Delete Resources and Verify Cleanup\\n\\n    When God deletes the MindWM host resource \"workstation\"\\n    Then the host \"workstation\" should be deleted\\n\\n    When God deletes the MindWM user resource \"bob\"\\n    Then the user \"bob\" should be deleted\\n    And namespace \"user-bob\" should not exists\\n\\n    When God deletes the MindWM context resource \"cyan\"\\n    Then the context \"cyan\" should be deleted\\n    And namespace \"context-cyan\" should not exists\\n\\n\\n\\n', media_type='text/x.cucumber.gherkin+plain')"},{"name":"scenario","value":"Pickle(id='292', uri='file:features/2_mindwm_crd_resources.feature', name='Delete Resources and Verify Cleanup', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='282', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='283', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['242'], id='284', type=<Type.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"'), PickleStep(argument=None, ast_node_ids=['243'], id='285', type=<Type.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted'), PickleStep(argument=None, ast_node_ids=['244'], id='286', type=<Type.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"'), PickleStep(argument=None, ast_node_ids=['245'], id='287', type=<Type.outcome: 'Outcome'>, text='the user \"bob\" should be deleted'), PickleStep(argument=None, ast_node_ids=['246'], id='288', type=<Type.outcome: 'Outcome'>, text='namespace \"user-bob\" should not exists'), PickleStep(argument=None, ast_node_ids=['247'], id='289', type=<Type.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"'), PickleStep(argument=None, ast_node_ids=['248'], id='290', type=<Type.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted'), PickleStep(argument=None, ast_node_ids=['249'], id='291', type=<Type.outcome: 'Outcome'>, text='namespace \"context-cyan\" should not exists')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['250'])"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["crd_resources","scenarios(PosixPath('/home/ci/mindwm-gitops/tests/mindwm_bdd/features/2_mindwm_crd_resources.feature'), filter_=None, encoding='utf-8', features_base_dir=None, features_base_url=None, features_path_type=None, features_mimetype=None, parser_type=None, parse_args=Args(args=(), kwargs={}), locators=())","pytest_bdd_scenario","@pytest.mark.usefixtures('feature', 'scenario', 'feature_source')","namespace(create=False, name='default')"]},"source":"961169de3dd575e2.json","parameterValues":["Feature(gherkin_document=GherkinDocument(uri='file:features/2_mindwm_crd_resources.feature', feature=Feature(location=Location(line=2, column=1), tags=[Tag(location=Location(line=1, column=1), name='@crd_resources', id='251')], language='en', keyword='Feature', name='MindWM Custom kubernetes resources', description='', children=[FeatureChild(rule=None, background=Background(location=Location(line=4, column=3), keyword='Background', name='', description='', steps=[Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='193'), Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready', doc_string=None, data_table=None, id='194')], id='195'), scenario=None), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=8, column=3), tags=[], keyword='Scenario', name='Create Context and check k8s resources', description='', steps=[Step(location=Location(line=9, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"cyan\"', doc_string=None, data_table=None, id='196'), Step(location=Location(line=10, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='197'), Step(location=Location(line=11, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should exists', doc_string=None, data_table=None, id='198'), Step(location=Location(line=12, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace', doc_string=None, data_table=None, id='199'), Step(location=Location(line=13, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state', doc_string=None, data_table=None, id='200'), Step(location=Location(line=14, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative service is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=15, column=7), rows=[TableRow(location=Location(line=15, column=7), cells=[TableCell(location=Location(line=15, column=9), value='Knative service name')], id='201'), TableRow(location=Location(line=16, column=7), cells=[TableCell(location=Location(line=16, column=9), value='dead-letter')], id='202'), TableRow(location=Location(line=17, column=7), cells=[TableCell(location=Location(line=17, column=9), value='iocontext')], id='203'), TableRow(location=Location(line=18, column=7), cells=[TableCell(location=Location(line=18, column=9), value='kafka-cdc')], id='204'), TableRow(location=Location(line=19, column=7), cells=[TableCell(location=Location(line=19, column=9), value='pong')], id='205')]), id='206'), Step(location=Location(line=20, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=21, column=7), rows=[TableRow(location=Location(line=21, column=7), cells=[TableCell(location=Location(line=21, column=9), value='Knative trigger name')], id='207'), TableRow(location=Location(line=22, column=7), cells=[TableCell(location=Location(line=22, column=9), value='iocontext-trigger')], id='208'), TableRow(location=Location(line=23, column=7), cells=[TableCell(location=Location(line=23, column=9), value='kafka-cdc-trigger')], id='209'), TableRow(location=Location(line=24, column=7), cells=[TableCell(location=Location(line=24, column=9), value='pong-trigger')], id='210')]), id='211'), Step(location=Location(line=25, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=26, column=7), rows=[TableRow(location=Location(line=26, column=7), cells=[TableCell(location=Location(line=26, column=9), value='Knative broker name')], id='212'), TableRow(location=Location(line=27, column=7), cells=[TableCell(location=Location(line=27, column=9), value='context-broker')], id='213')]), id='214'), Step(location=Location(line=28, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace', doc_string=None, data_table=None, id='215'), Step(location=Location(line=29, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=None, id='216')], examples=[], id='217')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=31, column=3), tags=[], keyword='Scenario', name='Create User and check k8s resources', description='', steps=[Step(location=Location(line=32, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"', doc_string=None, data_table=None, id='218'), Step(location=Location(line=33, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='219'), Step(location=Location(line=34, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should exists', doc_string=None, data_table=None, id='220'), Step(location=Location(line=35, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=36, column=7), rows=[TableRow(location=Location(line=36, column=7), cells=[TableCell(location=Location(line=36, column=9), value='Knative broker name')], id='221'), TableRow(location=Location(line=37, column=7), cells=[TableCell(location=Location(line=37, column=9), value='user-broker')], id='222')]), id='223'), Step(location=Location(line=38, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=39, column=7), rows=[TableRow(location=Location(line=39, column=7), cells=[TableCell(location=Location(line=39, column=9), value='Knative trigger name')], id='224'), TableRow(location=Location(line=40, column=7), cells=[TableCell(location=Location(line=40, column=9), value='context-cyan-to-user-bob')], id='225')]), id='226'), Step(location=Location(line=41, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=42, column=7), rows=[TableRow(location=Location(line=42, column=7), cells=[TableCell(location=Location(line=42, column=9), value='Knative trigger name')], id='227'), TableRow(location=Location(line=43, column=7), cells=[TableCell(location=Location(line=43, column=9), value='user-bob-to-context-cyan')], id='228')]), id='229')], examples=[], id='230')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=45, column=3), tags=[], keyword='Scenario', name='Create Host and check k8s resources', description='', steps=[Step(location=Location(line=46, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"', doc_string=None, data_table=None, id='231'), Step(location=Location(line=47, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='232'), Step(location=Location(line=48, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace', doc_string=None, data_table=None, id='233'), Step(location=Location(line=49, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=50, column=7), rows=[TableRow(location=Location(line=50, column=7), cells=[TableCell(location=Location(line=50, column=9), value='Knative trigger name')], id='234'), TableRow(location=Location(line=51, column=7), cells=[TableCell(location=Location(line=51, column=9), value='user-bob-to-context-cyan')], id='235'), TableRow(location=Location(line=52, column=7), cells=[TableCell(location=Location(line=52, column=9), value='user-broker-to-workstation-broker-trigger')], id='236')]), id='237'), Step(location=Location(line=53, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=54, column=7), rows=[TableRow(location=Location(line=54, column=7), cells=[TableCell(location=Location(line=54, column=9), value='Knative broker name')], id='238'), TableRow(location=Location(line=55, column=7), cells=[TableCell(location=Location(line=55, column=9), value='workstation-host-broker')], id='239')]), id='240')], examples=[], id='241')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=59, column=3), tags=[], keyword='Scenario', name='Delete Resources and Verify Cleanup', description='', steps=[Step(location=Location(line=61, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"', doc_string=None, data_table=None, id='242'), Step(location=Location(line=62, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted', doc_string=None, data_table=None, id='243'), Step(location=Location(line=64, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"', doc_string=None, data_table=None, id='244'), Step(location=Location(line=65, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"bob\" should be deleted', doc_string=None, data_table=None, id='245'), Step(location=Location(line=66, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should not exists', doc_string=None, data_table=None, id='246'), Step(location=Location(line=68, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"', doc_string=None, data_table=None, id='247'), Step(location=Location(line=69, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted', doc_string=None, data_table=None, id='248'), Step(location=Location(line=70, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should not exists', doc_string=None, data_table=None, id='249')], examples=[], id='250'))]), comments=[]), uri='file:features/2_mindwm_crd_resources.feature', filename='/home/ci/mindwm-gitops/tests/mindwm_bdd/features/2_mindwm_crd_resources.feature', registry={'251': Tag(location=Location(line=1, column=1), name='@crd_resources', id='251'), '195': Background(location=Location(line=4, column=3), keyword='Background', name='', description='', steps=[Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='193'), Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready', doc_string=None, data_table=None, id='194')], id='195'), '193': Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='193'), '194': Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready', doc_string=None, data_table=None, id='194'), '217': Scenario(location=Location(line=8, column=3), tags=[], keyword='Scenario', name='Create Context and check k8s resources', description='', steps=[Step(location=Location(line=9, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"cyan\"', doc_string=None, data_table=None, id='196'), Step(location=Location(line=10, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='197'), Step(location=Location(line=11, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should exists', doc_string=None, data_table=None, id='198'), Step(location=Location(line=12, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace', doc_string=None, data_table=None, id='199'), Step(location=Location(line=13, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state', doc_string=None, data_table=None, id='200'), Step(location=Location(line=14, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative service is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=15, column=7), rows=[TableRow(location=Location(line=15, column=7), cells=[TableCell(location=Location(line=15, column=9), value='Knative service name')], id='201'), TableRow(location=Location(line=16, column=7), cells=[TableCell(location=Location(line=16, column=9), value='dead-letter')], id='202'), TableRow(location=Location(line=17, column=7), cells=[TableCell(location=Location(line=17, column=9), value='iocontext')], id='203'), TableRow(location=Location(line=18, column=7), cells=[TableCell(location=Location(line=18, column=9), value='kafka-cdc')], id='204'), TableRow(location=Location(line=19, column=7), cells=[TableCell(location=Location(line=19, column=9), value='pong')], id='205')]), id='206'), Step(location=Location(line=20, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=21, column=7), rows=[TableRow(location=Location(line=21, column=7), cells=[TableCell(location=Location(line=21, column=9), value='Knative trigger name')], id='207'), TableRow(location=Location(line=22, column=7), cells=[TableCell(location=Location(line=22, column=9), value='iocontext-trigger')], id='208'), TableRow(location=Location(line=23, column=7), cells=[TableCell(location=Location(line=23, column=9), value='kafka-cdc-trigger')], id='209'), TableRow(location=Location(line=24, column=7), cells=[TableCell(location=Location(line=24, column=9), value='pong-trigger')], id='210')]), id='211'), Step(location=Location(line=25, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=26, column=7), rows=[TableRow(location=Location(line=26, column=7), cells=[TableCell(location=Location(line=26, column=9), value='Knative broker name')], id='212'), TableRow(location=Location(line=27, column=7), cells=[TableCell(location=Location(line=27, column=9), value='context-broker')], id='213')]), id='214'), Step(location=Location(line=28, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace', doc_string=None, data_table=None, id='215'), Step(location=Location(line=29, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=None, id='216')], examples=[], id='217'), '196': Step(location=Location(line=9, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"cyan\"', doc_string=None, data_table=None, id='196'), '197': Step(location=Location(line=10, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='197'), '198': Step(location=Location(line=11, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should exists', doc_string=None, data_table=None, id='198'), '199': Step(location=Location(line=12, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace', doc_string=None, data_table=None, id='199'), '200': Step(location=Location(line=13, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state', doc_string=None, data_table=None, id='200'), '206': Step(location=Location(line=14, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative service is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=15, column=7), rows=[TableRow(location=Location(line=15, column=7), cells=[TableCell(location=Location(line=15, column=9), value='Knative service name')], id='201'), TableRow(location=Location(line=16, column=7), cells=[TableCell(location=Location(line=16, column=9), value='dead-letter')], id='202'), TableRow(location=Location(line=17, column=7), cells=[TableCell(location=Location(line=17, column=9), value='iocontext')], id='203'), TableRow(location=Location(line=18, column=7), cells=[TableCell(location=Location(line=18, column=9), value='kafka-cdc')], id='204'), TableRow(location=Location(line=19, column=7), cells=[TableCell(location=Location(line=19, column=9), value='pong')], id='205')]), id='206'), '211': Step(location=Location(line=20, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=21, column=7), rows=[TableRow(location=Location(line=21, column=7), cells=[TableCell(location=Location(line=21, column=9), value='Knative trigger name')], id='207'), TableRow(location=Location(line=22, column=7), cells=[TableCell(location=Location(line=22, column=9), value='iocontext-trigger')], id='208'), TableRow(location=Location(line=23, column=7), cells=[TableCell(location=Location(line=23, column=9), value='kafka-cdc-trigger')], id='209'), TableRow(location=Location(line=24, column=7), cells=[TableCell(location=Location(line=24, column=9), value='pong-trigger')], id='210')]), id='211'), '214': Step(location=Location(line=25, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=26, column=7), rows=[TableRow(location=Location(line=26, column=7), cells=[TableCell(location=Location(line=26, column=9), value='Knative broker name')], id='212'), TableRow(location=Location(line=27, column=7), cells=[TableCell(location=Location(line=27, column=9), value='context-broker')], id='213')]), id='214'), '215': Step(location=Location(line=28, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace', doc_string=None, data_table=None, id='215'), '216': Step(location=Location(line=29, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=None, id='216'), '230': Scenario(location=Location(line=31, column=3), tags=[], keyword='Scenario', name='Create User and check k8s resources', description='', steps=[Step(location=Location(line=32, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"', doc_string=None, data_table=None, id='218'), Step(location=Location(line=33, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='219'), Step(location=Location(line=34, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should exists', doc_string=None, data_table=None, id='220'), Step(location=Location(line=35, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=36, column=7), rows=[TableRow(location=Location(line=36, column=7), cells=[TableCell(location=Location(line=36, column=9), value='Knative broker name')], id='221'), TableRow(location=Location(line=37, column=7), cells=[TableCell(location=Location(line=37, column=9), value='user-broker')], id='222')]), id='223'), Step(location=Location(line=38, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=39, column=7), rows=[TableRow(location=Location(line=39, column=7), cells=[TableCell(location=Location(line=39, column=9), value='Knative trigger name')], id='224'), TableRow(location=Location(line=40, column=7), cells=[TableCell(location=Location(line=40, column=9), value='context-cyan-to-user-bob')], id='225')]), id='226'), Step(location=Location(line=41, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=42, column=7), rows=[TableRow(location=Location(line=42, column=7), cells=[TableCell(location=Location(line=42, column=9), value='Knative trigger name')], id='227'), TableRow(location=Location(line=43, column=7), cells=[TableCell(location=Location(line=43, column=9), value='user-bob-to-context-cyan')], id='228')]), id='229')], examples=[], id='230'), '218': Step(location=Location(line=32, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"', doc_string=None, data_table=None, id='218'), '219': Step(location=Location(line=33, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='219'), '220': Step(location=Location(line=34, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should exists', doc_string=None, data_table=None, id='220'), '223': Step(location=Location(line=35, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=36, column=7), rows=[TableRow(location=Location(line=36, column=7), cells=[TableCell(location=Location(line=36, column=9), value='Knative broker name')], id='221'), TableRow(location=Location(line=37, column=7), cells=[TableCell(location=Location(line=37, column=9), value='user-broker')], id='222')]), id='223'), '226': Step(location=Location(line=38, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"context-cyan\" namespace', doc_string=None, data_table=DataTable(location=Location(line=39, column=7), rows=[TableRow(location=Location(line=39, column=7), cells=[TableCell(location=Location(line=39, column=9), value='Knative trigger name')], id='224'), TableRow(location=Location(line=40, column=7), cells=[TableCell(location=Location(line=40, column=9), value='context-cyan-to-user-bob')], id='225')]), id='226'), '229': Step(location=Location(line=41, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=42, column=7), rows=[TableRow(location=Location(line=42, column=7), cells=[TableCell(location=Location(line=42, column=9), value='Knative trigger name')], id='227'), TableRow(location=Location(line=43, column=7), cells=[TableCell(location=Location(line=43, column=9), value='user-bob-to-context-cyan')], id='228')]), id='229'), '241': Scenario(location=Location(line=45, column=3), tags=[], keyword='Scenario', name='Create Host and check k8s resources', description='', steps=[Step(location=Location(line=46, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"', doc_string=None, data_table=None, id='231'), Step(location=Location(line=47, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='232'), Step(location=Location(line=48, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace', doc_string=None, data_table=None, id='233'), Step(location=Location(line=49, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=50, column=7), rows=[TableRow(location=Location(line=50, column=7), cells=[TableCell(location=Location(line=50, column=9), value='Knative trigger name')], id='234'), TableRow(location=Location(line=51, column=7), cells=[TableCell(location=Location(line=51, column=9), value='user-bob-to-context-cyan')], id='235'), TableRow(location=Location(line=52, column=7), cells=[TableCell(location=Location(line=52, column=9), value='user-broker-to-workstation-broker-trigger')], id='236')]), id='237'), Step(location=Location(line=53, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=54, column=7), rows=[TableRow(location=Location(line=54, column=7), cells=[TableCell(location=Location(line=54, column=9), value='Knative broker name')], id='238'), TableRow(location=Location(line=55, column=7), cells=[TableCell(location=Location(line=55, column=9), value='workstation-host-broker')], id='239')]), id='240')], examples=[], id='241'), '231': Step(location=Location(line=46, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"', doc_string=None, data_table=None, id='231'), '232': Step(location=Location(line=47, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='232'), '233': Step(location=Location(line=48, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace', doc_string=None, data_table=None, id='233'), '237': Step(location=Location(line=49, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative triggers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=50, column=7), rows=[TableRow(location=Location(line=50, column=7), cells=[TableCell(location=Location(line=50, column=9), value='Knative trigger name')], id='234'), TableRow(location=Location(line=51, column=7), cells=[TableCell(location=Location(line=51, column=9), value='user-bob-to-context-cyan')], id='235'), TableRow(location=Location(line=52, column=7), cells=[TableCell(location=Location(line=52, column=9), value='user-broker-to-workstation-broker-trigger')], id='236')]), id='237'), '240': Step(location=Location(line=53, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='following knative brokers is in ready state in \"user-bob\" namespace', doc_string=None, data_table=DataTable(location=Location(line=54, column=7), rows=[TableRow(location=Location(line=54, column=7), cells=[TableCell(location=Location(line=54, column=9), value='Knative broker name')], id='238'), TableRow(location=Location(line=55, column=7), cells=[TableCell(location=Location(line=55, column=9), value='workstation-host-broker')], id='239')]), id='240'), '250': Scenario(location=Location(line=59, column=3), tags=[], keyword='Scenario', name='Delete Resources and Verify Cleanup', description='', steps=[Step(location=Location(line=61, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"', doc_string=None, data_table=None, id='242'), Step(location=Location(line=62, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted', doc_string=None, data_table=None, id='243'), Step(location=Location(line=64, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"', doc_string=None, data_table=None, id='244'), Step(location=Location(line=65, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"bob\" should be deleted', doc_string=None, data_table=None, id='245'), Step(location=Location(line=66, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should not exists', doc_string=None, data_table=None, id='246'), Step(location=Location(line=68, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"', doc_string=None, data_table=None, id='247'), Step(location=Location(line=69, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted', doc_string=None, data_table=None, id='248'), Step(location=Location(line=70, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should not exists', doc_string=None, data_table=None, id='249')], examples=[], id='250'), '242': Step(location=Location(line=61, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"', doc_string=None, data_table=None, id='242'), '243': Step(location=Location(line=62, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted', doc_string=None, data_table=None, id='243'), '244': Step(location=Location(line=64, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"', doc_string=None, data_table=None, id='244'), '245': Step(location=Location(line=65, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"bob\" should be deleted', doc_string=None, data_table=None, id='245'), '246': Step(location=Location(line=66, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"user-bob\" should not exists', doc_string=None, data_table=None, id='246'), '247': Step(location=Location(line=68, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"', doc_string=None, data_table=None, id='247'), '248': Step(location=Location(line=69, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted', doc_string=None, data_table=None, id='248'), '249': Step(location=Location(line=70, column=5), keyword='And ', keyword_type=<KeywordType.conjunction: 'Conjunction'>, text='namespace \"context-cyan\" should not exists', doc_string=None, data_table=None, id='249')}, pickles=[Pickle(id='264', uri='file:features/2_mindwm_crd_resources.feature', name='Create Context and check k8s resources', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='252', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='253', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['196'], id='254', type=<Type.action: 'Action'>, text='God creates a MindWM context with the name \"cyan\"'), PickleStep(argument=None, ast_node_ids=['197'], id='255', type=<Type.outcome: 'Outcome'>, text='the context should be ready and operable'), PickleStep(argument=None, ast_node_ids=['198'], id='256', type=<Type.outcome: 'Outcome'>, text='namespace \"context-cyan\" should exists'), PickleStep(argument=None, ast_node_ids=['199'], id='257', type=<Type.outcome: 'Outcome'>, text='helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace'), PickleStep(argument=None, ast_node_ids=['200'], id='258', type=<Type.outcome: 'Outcome'>, text='statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative service name')]), PickleTableRow(cells=[PickleTableCell(value='dead-letter')]), PickleTableRow(cells=[PickleTableCell(value='iocontext')]), PickleTableRow(cells=[PickleTableCell(value='kafka-cdc')]), PickleTableRow(cells=[PickleTableCell(value='pong')])])), ast_node_ids=['206'], id='259', type=<Type.outcome: 'Outcome'>, text='following knative service is in ready state in \"context-cyan\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative trigger name')]), PickleTableRow(cells=[PickleTableCell(value='iocontext-trigger')]), PickleTableRow(cells=[PickleTableCell(value='kafka-cdc-trigger')]), PickleTableRow(cells=[PickleTableCell(value='pong-trigger')])])), ast_node_ids=['211'], id='260', type=<Type.outcome: 'Outcome'>, text='following knative triggers is in ready state in \"context-cyan\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative broker name')]), PickleTableRow(cells=[PickleTableCell(value='context-broker')])])), ast_node_ids=['214'], id='261', type=<Type.outcome: 'Outcome'>, text='following knative brokers is in ready state in \"context-cyan\" namespace'), PickleStep(argument=None, ast_node_ids=['215'], id='262', type=<Type.outcome: 'Outcome'>, text='kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace'), PickleStep(argument=None, ast_node_ids=['216'], id='263', type=<Type.outcome: 'Outcome'>, text='kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['217']), Pickle(id='273', uri='file:features/2_mindwm_crd_resources.feature', name='Create User and check k8s resources', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='265', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='266', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['218'], id='267', type=<Type.action: 'Action'>, text='God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"'), PickleStep(argument=None, ast_node_ids=['219'], id='268', type=<Type.outcome: 'Outcome'>, text='the user resource should be ready and operable'), PickleStep(argument=None, ast_node_ids=['220'], id='269', type=<Type.outcome: 'Outcome'>, text='namespace \"user-bob\" should exists'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative broker name')]), PickleTableRow(cells=[PickleTableCell(value='user-broker')])])), ast_node_ids=['223'], id='270', type=<Type.outcome: 'Outcome'>, text='following knative brokers is in ready state in \"user-bob\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative trigger name')]), PickleTableRow(cells=[PickleTableCell(value='context-cyan-to-user-bob')])])), ast_node_ids=['226'], id='271', type=<Type.outcome: 'Outcome'>, text='following knative triggers is in ready state in \"context-cyan\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative trigger name')]), PickleTableRow(cells=[PickleTableCell(value='user-bob-to-context-cyan')])])), ast_node_ids=['229'], id='272', type=<Type.outcome: 'Outcome'>, text='following knative triggers is in ready state in \"user-bob\" namespace')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['230']), Pickle(id='281', uri='file:features/2_mindwm_crd_resources.feature', name='Create Host and check k8s resources', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='274', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='275', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['231'], id='276', type=<Type.action: 'Action'>, text='God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"'), PickleStep(argument=None, ast_node_ids=['232'], id='277', type=<Type.outcome: 'Outcome'>, text='the host resource should be ready and operable'), PickleStep(argument=None, ast_node_ids=['233'], id='278', type=<Type.outcome: 'Outcome'>, text='NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative trigger name')]), PickleTableRow(cells=[PickleTableCell(value='user-bob-to-context-cyan')]), PickleTableRow(cells=[PickleTableCell(value='user-broker-to-workstation-broker-trigger')])])), ast_node_ids=['237'], id='279', type=<Type.outcome: 'Outcome'>, text='following knative triggers is in ready state in \"user-bob\" namespace'), PickleStep(argument=PickleStepArgument(doc_string=None, data_table=PickleTable(rows=[PickleTableRow(cells=[PickleTableCell(value='Knative broker name')]), PickleTableRow(cells=[PickleTableCell(value='workstation-host-broker')])])), ast_node_ids=['240'], id='280', type=<Type.outcome: 'Outcome'>, text='following knative brokers is in ready state in \"user-bob\" namespace')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['241']), Pickle(id='292', uri='file:features/2_mindwm_crd_resources.feature', name='Delete Resources and Verify Cleanup', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='282', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='283', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['242'], id='284', type=<Type.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"'), PickleStep(argument=None, ast_node_ids=['243'], id='285', type=<Type.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted'), PickleStep(argument=None, ast_node_ids=['244'], id='286', type=<Type.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"'), PickleStep(argument=None, ast_node_ids=['245'], id='287', type=<Type.outcome: 'Outcome'>, text='the user \"bob\" should be deleted'), PickleStep(argument=None, ast_node_ids=['246'], id='288', type=<Type.outcome: 'Outcome'>, text='namespace \"user-bob\" should not exists'), PickleStep(argument=None, ast_node_ids=['247'], id='289', type=<Type.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"'), PickleStep(argument=None, ast_node_ids=['248'], id='290', type=<Type.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted'), PickleStep(argument=None, ast_node_ids=['249'], id='291', type=<Type.outcome: 'Outcome'>, text='namespace \"context-cyan\" should not exists')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['250'])])","Source(uri='file:features/2_mindwm_crd_resources.feature', data='@crd_resources\\nFeature: MindWM Custom kubernetes resources\\n\\n  Background:\\n    Given a MindWM environment\\n    Then all nodes in Kubernetes are ready\\n    \\n  Scenario: Create Context and check k8s resources\\n    When God creates a MindWM context with the name \"cyan\"\\n    Then the context should be ready and operable\\n    And namespace \"context-cyan\" should exists \\n    And helm release \"cyan-neo4j\" is deployed in \"context-cyan\" namespace\\n    And statefulset \"cyan-neo4j\" in namespace \"context-cyan\" is in ready state\\n    And following knative service is in ready state in \"context-cyan\" namespace\\n      | Knative service name |\\n      | dead-letter          |\\n      | iocontext            |\\n      | kafka-cdc            |\\n      | pong                 |\\n    And following knative triggers is in ready state in \"context-cyan\" namespace\\n      | Knative trigger name |\\n      | iocontext-trigger    |\\n      | kafka-cdc-trigger    |\\n      | pong-trigger         |\\n    And following knative brokers is in ready state in \"context-cyan\" namespace\\n      | Knative broker name |\\n      | context-broker      |\\n    And kafka topic \"context-cyan-cdc\" is in ready state in \"redpanda\" namespace\\n    And kafka source \"context-cyan-cdc-kafkasource\" is in ready state in \"context-cyan\" namespace\\n  \\n  Scenario: Create User and check k8s resources\\n    When God creates a MindWM user resource with the name \"bob\" and connects it to the context \"cyan\"\\n    Then the user resource should be ready and operable\\n    And namespace \"user-bob\" should exists \\n    And following knative brokers is in ready state in \"user-bob\" namespace\\n      | Knative broker name |\\n      | user-broker         |\\n    And following knative triggers is in ready state in \"context-cyan\" namespace\\n      | Knative trigger name          |\\n      | context-cyan-to-user-bob    |\\n    And following knative triggers is in ready state in \"user-bob\" namespace\\n      | Knative trigger name          |\\n      | user-bob-to-context-cyan    |\\n\\n  Scenario: Create Host and check k8s resources\\n    When God creates a MindWM host resource with the name \"workstation\" and connects it to the user \"bob\"\\n    Then the host resource should be ready and operable\\n    And NatsJetStreamChannel \"workstation-host-broker-kne-trigger\" is ready in \"user-bob\" namespace\\n    And following knative triggers is in ready state in \"user-bob\" namespace\\n      | Knative trigger name                    |\\n      | user-bob-to-context-cyan              |\\n      | user-broker-to-workstation-broker-trigger    |\\n    And following knative brokers is in ready state in \"user-bob\" namespace\\n      | Knative broker name  |\\n      | workstation-host-broker   |\\n\\n\\n\\n  Scenario: Delete Resources and Verify Cleanup\\n\\n    When God deletes the MindWM host resource \"workstation\"\\n    Then the host \"workstation\" should be deleted\\n\\n    When God deletes the MindWM user resource \"bob\"\\n    Then the user \"bob\" should be deleted\\n    And namespace \"user-bob\" should not exists\\n\\n    When God deletes the MindWM context resource \"cyan\"\\n    Then the context \"cyan\" should be deleted\\n    And namespace \"context-cyan\" should not exists\\n\\n\\n\\n', media_type='text/x.cucumber.gherkin+plain')","Pickle(id='292', uri='file:features/2_mindwm_crd_resources.feature', name='Delete Resources and Verify Cleanup', language='en', steps=[PickleStep(argument=None, ast_node_ids=['193'], id='282', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['194'], id='283', type=<Type.outcome: 'Outcome'>, text='all nodes in Kubernetes are ready'), PickleStep(argument=None, ast_node_ids=['242'], id='284', type=<Type.action: 'Action'>, text='God deletes the MindWM host resource \"workstation\"'), PickleStep(argument=None, ast_node_ids=['243'], id='285', type=<Type.outcome: 'Outcome'>, text='the host \"workstation\" should be deleted'), PickleStep(argument=None, ast_node_ids=['244'], id='286', type=<Type.action: 'Action'>, text='God deletes the MindWM user resource \"bob\"'), PickleStep(argument=None, ast_node_ids=['245'], id='287', type=<Type.outcome: 'Outcome'>, text='the user \"bob\" should be deleted'), PickleStep(argument=None, ast_node_ids=['246'], id='288', type=<Type.outcome: 'Outcome'>, text='namespace \"user-bob\" should not exists'), PickleStep(argument=None, ast_node_ids=['247'], id='289', type=<Type.action: 'Action'>, text='God deletes the MindWM context resource \"cyan\"'), PickleStep(argument=None, ast_node_ids=['248'], id='290', type=<Type.outcome: 'Outcome'>, text='the context \"cyan\" should be deleted'), PickleStep(argument=None, ast_node_ids=['249'], id='291', type=<Type.outcome: 'Outcome'>, text='namespace \"context-cyan\" should not exists')], tags=[PickleTag(name='@crd_resources', ast_node_id='251')], ast_node_ids=['250'])"]}