{"uid":"5f86fe00d09663c8","name":"test_tracesql","fullName":"test_ping_pong.Test_PingPong#test_tracesql","historyId":"18075874899d2e7549049e2062a0701d","time":{"start":1725995806757,"stop":1725995811793,"duration":5036},"status":"failed","statusMessage":"AssertionError: Response code 404 != 200\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <test_ping_pong.Test_PingPong object at 0x79fa1d30e3f0>\n\n    @pytest.mark.depends(on=['test_send_ping_context_broker'])\n    def test_tracesql(self):\n        # TODO(@metacoma) wait for resource\n        #url = f\"http://tempo.mindwm.local/api/traces/{trace_id}\"\n        url = f\"http://{ingress_host}/api/traces/{trace_id}\"\n        headers = {\n            \"Host\": \"tempo.mindwm.local\"\n        }\n        print(f\"request url {url}\")\n        time.sleep(5)\n        # Perform the GET request\n        response = requests.get(url, headers = headers)\n        print(f\"Status Code: {response.status_code}\")\n        print(f\"Headers: {response.headers}\")\n        #print(f\"Response Text: {response.text}\")\n>       assert response.status_code == 200, f\"Response code {response.status_code} != 200\"\nE       AssertionError: Response code 404 != 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_ping_pong.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"tag","value":"depends(on=['test_send_ping_context_broker'])"},{"name":"suite","value":"test_ping_pong"},{"name":"subSuite","value":"Test_PingPong"},{"name":"host","value":"localhost"},{"name":"thread","value":"793276-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_ping_pong"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["depends(on=['test_send_ping_context_broker'])"]},"source":"5f86fe00d09663c8.json","parameterValues":[]}