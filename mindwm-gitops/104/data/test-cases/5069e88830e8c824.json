{"uid":"5069e88830e8c824","name":"test_scenarios[file:mindwm_lifecycle.feature-Minwdm custom resource definition-]","fullName":"mindwm_lifecycle#test_scenarios","historyId":"9086b0290d8b8ae556d7fba7e5a5a2d7","time":{"start":1726338972150,"stop":1726338972154,"duration":4},"status":"broken","statusMessage":"kubernetes.config.config_exception.ConfigException: Invalid kube-config file. No configuration found.","statusTrace":"self = <pytest_bdd.runner.ScenarioRunner object at 0x7e871f20e360>\nstep = PickleStep(argument=None, ast_node_ids=['0'], id='3', type=<Type.context: 'Context'>, text='a kubernetes cluster')\nstep_definition = StepHandler.Definition(func=<function kubernetes_cluster at 0x7e871dbeb2e0>, type_=<Type.context: 'Context'>, parser=<..., params_fixtures_mapping=True, param_defaults={}, target_fixtures=[], liberal=None, id=NOTHING, _Definition__cache={})\nstep_params = {}\n\n    def _get_step_function_kwargs(self, step, step_definition, step_params):\n        for param in get_args(step_definition.func):\n            try:\n>               yield param, step_params[param]\nE               KeyError: 'kube'\n\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:161: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pytest_bdd.runner.ScenarioRunner object at 0x7e871f20e360>\nstep = PickleStep(argument=None, ast_node_ids=['0'], id='3', type=<Type.context: 'Context'>, text='a kubernetes cluster')\nstep_definition = StepHandler.Definition(func=<function kubernetes_cluster at 0x7e871dbeb2e0>, type_=<Type.context: 'Context'>, parser=<..., params_fixtures_mapping=True, param_defaults={}, target_fixtures=[], liberal=None, id=NOTHING, _Definition__cache={})\nstep_params = {}\n\n    def _get_step_function_kwargs(self, step, step_definition, step_params):\n        for param in get_args(step_definition.func):\n            try:\n                yield param, step_params[param]\n            except KeyError:\n                try:\n>                   yield param, dict(step=step)[param]\nE                   KeyError: 'kube'\n\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:164: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pytest_bdd.runner.ScenarioRunner object at 0x7e871f20e360>\nitem = <Function test_scenarios[file:mindwm_lifecycle.feature-Minwdm custom resource definition-]>\n\n    def pytest_runtest_call(self, item: Item):\n        if \"pytest_bdd_scenario\" in list(map(attrgetter(\"name\"), item.iter_markers())):\n            self.request = item._request\n            self.feature = self.request.getfixturevalue(\"feature\")\n            self.scenario = self.request.getfixturevalue(\"scenario\")\n            self.plugin_manager = self.request.config.hook\n            self.plugin_manager.pytest_bdd_before_scenario(\n                request=self.request, feature=self.feature, scenario=self.scenario\n            )\n            try:\n>               self.plugin_manager.pytest_bdd_run_scenario(\n                    request=self.request,\n                    feature=self.feature,\n                    scenario=self.scenario,\n                )\n\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:59: in pytest_bdd_run_scenario\n    return step_dispatcher(steps)\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:69: in dispatcher\n    self.plugin_manager.pytest_bdd_run_step(\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:122: in pytest_bdd_run_step\n    step_function_kwargs = dict(self._get_step_function_kwargs(step, step_definition, step_params))\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:166: in _get_step_function_kwargs\n    yield param, self.request.getfixturevalue(param)\n.venv/lib/python3.12/site-packages/kubetest/plugin.py:460: in kube\n    kubernetes.config.load_kube_config(\n.venv/lib/python3.12/site-packages/kubernetes/config/kube_config.py:819: in load_kube_config\n    loader = _get_kube_config_loader(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfilename = '/home/ci/.kube/config', config_dict = None, persist_config = True\nkwargs = {'active_context': None, 'config_persister': <bound method KubeConfigMerger.save_changes of <kubernetes.config.kube_config.KubeConfigMerger object at 0x7e871dbec290>>, 'temp_file_path': None}\nkcfg = <kubernetes.config.kube_config.KubeConfigMerger object at 0x7e871dbec290>\n\n    def _get_kube_config_loader(\n            filename=None,\n            config_dict=None,\n            persist_config=False,\n            **kwargs):\n        if config_dict is None:\n            kcfg = KubeConfigMerger(filename)\n            if persist_config and 'config_persister' not in kwargs:\n                kwargs['config_persister'] = kcfg.save_changes\n    \n            if kcfg.config is None:\n>               raise ConfigException(\n                    'Invalid kube-config file. '\n                    'No configuration found.')\nE               kubernetes.config.config_exception.ConfigException: Invalid kube-config file. No configuration found.\n\n.venv/lib/python3.12/site-packages/kubernetes/config/kube_config.py:776: ConfigException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"steps_left","time":{"start":1726338972150,"stop":1726338972150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_matcher","time":{"start":1726338972150,"stop":1726338972150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_registry","time":{"start":1726338972150,"stop":1726338972150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1726338972150,"stop":1726338972150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_registry","time":{"start":1726338972150,"stop":1726338972150,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"parameter_type_registry","time":{"start":1726338972151,"stop":1726338972151,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubecontext","time":{"start":1726338972152,"stop":1726338972152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubeconfig","time":{"start":1726338972152,"stop":1726338972152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"tag","value":"scenarios(PosixPath('/home/ci/mindwm-gitops/tests/mindwm_bdd/mindwm_lifecycle.feature'), filter_=None, encoding='utf-8', features_base_dir=None, features_base_url=None, features_path_type=None, features_mimetype=None, parser_type=None, parse_args=Args(args=(), kwargs={}), locators=())"},{"name":"tag","value":"@pytest.mark.usefixtures('feature', 'scenario', 'feature_source')"},{"name":"tag","value":"pytest_bdd_scenario"},{"name":"tag","value":"namespace(create=False, name='default')"},{"name":"suite","value":"mindwm_lifecycle"},{"name":"host","value":"localhost"},{"name":"thread","value":"4357-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"mindwm_lifecycle"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"feature","value":"Feature(gherkin_document=GherkinDocument(uri='file:mindwm_lifecycle.feature', feature=Feature(location=Location(line=1, column=1), tags=[], language='en', keyword='Feature', name='Minwdm custom resource definition', description='', children=[FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=2, column=3), tags=[], keyword='Scenario', name='', description='', steps=[Step(location=Location(line=3, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a kubernetes cluster', doc_string=None, data_table=None, id='0'), Step(location=Location(line=4, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready', doc_string=None, data_table=None, id='1')], examples=[], id='2'))]), comments=[]), uri='file:mindwm_lifecycle.feature', filename='/home/ci/mindwm-gitops/tests/mindwm_bdd/mindwm_lifecycle.feature', registry={'2': Scenario(location=Location(line=2, column=3), tags=[], keyword='Scenario', name='', description='', steps=[Step(location=Location(line=3, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a kubernetes cluster', doc_string=None, data_table=None, id='0'), Step(location=Location(line=4, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready', doc_string=None, data_table=None, id='1')], examples=[], id='2'), '0': Step(location=Location(line=3, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a kubernetes cluster', doc_string=None, data_table=None, id='0'), '1': Step(location=Location(line=4, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready', doc_string=None, data_table=None, id='1')}, pickles=[Pickle(id='5', uri='file:mindwm_lifecycle.feature', name='', language='en', steps=[PickleStep(argument=None, ast_node_ids=['0'], id='3', type=<Type.context: 'Context'>, text='a kubernetes cluster'), PickleStep(argument=None, ast_node_ids=['1'], id='4', type=<Type.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready')], tags=[], ast_node_ids=['2'])])"},{"name":"feature_source","value":"Source(uri='file:mindwm_lifecycle.feature', data='Feature: Minwdm custom resource definition\\n  Scenario: \\n    Given a kubernetes cluster\\n    Then all nodes in the kubernetes are ready\\n', media_type='text/x.cucumber.gherkin+plain')"},{"name":"scenario","value":"Pickle(id='5', uri='file:mindwm_lifecycle.feature', name='', language='en', steps=[PickleStep(argument=None, ast_node_ids=['0'], id='3', type=<Type.context: 'Context'>, text='a kubernetes cluster'), PickleStep(argument=None, ast_node_ids=['1'], id='4', type=<Type.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready')], tags=[], ast_node_ids=['2'])"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["scenarios(PosixPath('/home/ci/mindwm-gitops/tests/mindwm_bdd/mindwm_lifecycle.feature'), filter_=None, encoding='utf-8', features_base_dir=None, features_base_url=None, features_path_type=None, features_mimetype=None, parser_type=None, parse_args=Args(args=(), kwargs={}), locators=())","pytest_bdd_scenario","@pytest.mark.usefixtures('feature', 'scenario', 'feature_source')","namespace(create=False, name='default')"]},"source":"5069e88830e8c824.json","parameterValues":["Feature(gherkin_document=GherkinDocument(uri='file:mindwm_lifecycle.feature', feature=Feature(location=Location(line=1, column=1), tags=[], language='en', keyword='Feature', name='Minwdm custom resource definition', description='', children=[FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=2, column=3), tags=[], keyword='Scenario', name='', description='', steps=[Step(location=Location(line=3, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a kubernetes cluster', doc_string=None, data_table=None, id='0'), Step(location=Location(line=4, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready', doc_string=None, data_table=None, id='1')], examples=[], id='2'))]), comments=[]), uri='file:mindwm_lifecycle.feature', filename='/home/ci/mindwm-gitops/tests/mindwm_bdd/mindwm_lifecycle.feature', registry={'2': Scenario(location=Location(line=2, column=3), tags=[], keyword='Scenario', name='', description='', steps=[Step(location=Location(line=3, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a kubernetes cluster', doc_string=None, data_table=None, id='0'), Step(location=Location(line=4, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready', doc_string=None, data_table=None, id='1')], examples=[], id='2'), '0': Step(location=Location(line=3, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a kubernetes cluster', doc_string=None, data_table=None, id='0'), '1': Step(location=Location(line=4, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready', doc_string=None, data_table=None, id='1')}, pickles=[Pickle(id='5', uri='file:mindwm_lifecycle.feature', name='', language='en', steps=[PickleStep(argument=None, ast_node_ids=['0'], id='3', type=<Type.context: 'Context'>, text='a kubernetes cluster'), PickleStep(argument=None, ast_node_ids=['1'], id='4', type=<Type.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready')], tags=[], ast_node_ids=['2'])])","Source(uri='file:mindwm_lifecycle.feature', data='Feature: Minwdm custom resource definition\\n  Scenario: \\n    Given a kubernetes cluster\\n    Then all nodes in the kubernetes are ready\\n', media_type='text/x.cucumber.gherkin+plain')","Pickle(id='5', uri='file:mindwm_lifecycle.feature', name='', language='en', steps=[PickleStep(argument=None, ast_node_ids=['0'], id='3', type=<Type.context: 'Context'>, text='a kubernetes cluster'), PickleStep(argument=None, ast_node_ids=['1'], id='4', type=<Type.outcome: 'Outcome'>, text='all nodes in the kubernetes are ready')], tags=[], ast_node_ids=['2'])"]}