{"uid":"ad35c2c712ab5ba5","name":"test_scenarios[file:features/mindwm_crd.feature-Minwdm custom resource definition-]","fullName":"features.mindwm_crd#test_scenarios","historyId":"f1f3577765f74b8c2c8af529accff10e","time":{"start":1726448310921,"stop":1726448310948,"duration":27},"status":"broken","statusMessage":"KeyError: 'status'","statusTrace":"self = <pytest_bdd.runner.ScenarioRunner object at 0x7ca77282aea0>\nitem = <Function test_scenarios[file:features/mindwm_crd.feature-Minwdm custom resource definition-]>\n\n    def pytest_runtest_call(self, item: Item):\n        if \"pytest_bdd_scenario\" in list(map(attrgetter(\"name\"), item.iter_markers())):\n            self.request = item._request\n            self.feature = self.request.getfixturevalue(\"feature\")\n            self.scenario = self.request.getfixturevalue(\"scenario\")\n            self.plugin_manager = self.request.config.hook\n            self.plugin_manager.pytest_bdd_before_scenario(\n                request=self.request, feature=self.feature, scenario=self.scenario\n            )\n            try:\n>               self.plugin_manager.pytest_bdd_run_scenario(\n                    request=self.request,\n                    feature=self.feature,\n                    scenario=self.scenario,\n                )\n\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:59: in pytest_bdd_run_scenario\n    return step_dispatcher(steps)\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:69: in dispatcher\n    self.plugin_manager.pytest_bdd_run_step(\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:128: in pytest_bdd_run_step\n    step_result = step_caller()\nconftest.py:45: in minwdm_context_validate\n    mindwm_crd.context_validate(kube, ctx['context_name'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkube = <kubetest.client.TestClient object at 0x7ca772082b70>\ncontext_name = 'xxx3'\n\n    def context_validate(kube, context_name):\n        try:\n            context = context_get(kube, context_name)\n        except kube_exceptions.ApiException:\n            assert False, f\"Context {context_name} not found in cluster\"\n>       for condition in context['status']['conditions']:\nE       KeyError: 'status'\n\nmindwm_crd.py:59: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"step_registry","time":{"start":1726448310921,"stop":1726448310921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1726448310921,"stop":1726448310921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_registry","time":{"start":1726448310921,"stop":1726448310921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"steps_left","time":{"start":1726448310921,"stop":1726448310921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_matcher","time":{"start":1726448310921,"stop":1726448310921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"parameter_type_registry","time":{"start":1726448310922,"stop":1726448310922,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubecontext","time":{"start":1726448310923,"stop":1726448310923,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubeconfig","time":{"start":1726448310923,"stop":1726448310923,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kube","time":{"start":1726448310923,"stop":1726448310927,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"ctx","time":{"start":1726448310938,"stop":1726448310938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"tag","value":"scenarios(PosixPath('/home/ci/mindwm-gitops/tests/mindwm_bdd/features/mindwm_crd.feature'), filter_=None, encoding='utf-8', features_base_dir=None, features_base_url=None, features_path_type=None, features_mimetype=None, parser_type=None, parse_args=Args(args=(), kwargs={}), locators=())"},{"name":"tag","value":"@pytest.mark.usefixtures('feature', 'scenario', 'feature_source')"},{"name":"tag","value":"pytest_bdd_scenario"},{"name":"tag","value":"crd"},{"name":"tag","value":"namespace(create=False, name='default')"},{"name":"parentSuite","value":"features"},{"name":"suite","value":"mindwm_crd"},{"name":"host","value":"localhost"},{"name":"thread","value":"39777-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"features.mindwm_crd"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"feature","value":"Feature(gherkin_document=GherkinDocument(uri='file:features/mindwm_crd.feature', feature=Feature(location=Location(line=2, column=1), tags=[Tag(location=Location(line=1, column=1), name='@crd', id='4')], language='en', keyword='Feature', name='Minwdm custom resource definition', description='', children=[FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=3, column=3), tags=[], keyword='Scenario', name='', description='', steps=[Step(location=Location(line=4, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='MindWM environment', doc_string=None, data_table=None, id='0'), Step(location=Location(line=5, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='the user creates a MindWM context with the name xxx3', doc_string=None, data_table=None, id='1'), Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='validate that the context is ready and operable', doc_string=None, data_table=None, id='2')], examples=[], id='3'))]), comments=[]), uri='file:features/mindwm_crd.feature', filename='/home/ci/mindwm-gitops/tests/mindwm_bdd/features/mindwm_crd.feature', registry={'4': Tag(location=Location(line=1, column=1), name='@crd', id='4'), '3': Scenario(location=Location(line=3, column=3), tags=[], keyword='Scenario', name='', description='', steps=[Step(location=Location(line=4, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='MindWM environment', doc_string=None, data_table=None, id='0'), Step(location=Location(line=5, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='the user creates a MindWM context with the name xxx3', doc_string=None, data_table=None, id='1'), Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='validate that the context is ready and operable', doc_string=None, data_table=None, id='2')], examples=[], id='3'), '0': Step(location=Location(line=4, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='MindWM environment', doc_string=None, data_table=None, id='0'), '1': Step(location=Location(line=5, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='the user creates a MindWM context with the name xxx3', doc_string=None, data_table=None, id='1'), '2': Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='validate that the context is ready and operable', doc_string=None, data_table=None, id='2')}, pickles=[Pickle(id='8', uri='file:features/mindwm_crd.feature', name='', language='en', steps=[PickleStep(argument=None, ast_node_ids=['0'], id='5', type=<Type.context: 'Context'>, text='MindWM environment'), PickleStep(argument=None, ast_node_ids=['1'], id='6', type=<Type.action: 'Action'>, text='the user creates a MindWM context with the name xxx3'), PickleStep(argument=None, ast_node_ids=['2'], id='7', type=<Type.outcome: 'Outcome'>, text='validate that the context is ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='4')], ast_node_ids=['3'])])"},{"name":"feature_source","value":"Source(uri='file:features/mindwm_crd.feature', data='@crd\\nFeature: Minwdm custom resource definition\\n  Scenario: \\n    Given MindWM environment\\n    When the user creates a MindWM context with the name xxx3\\n    Then validate that the context is ready and operable\\n', media_type='text/x.cucumber.gherkin+plain')"},{"name":"scenario","value":"Pickle(id='8', uri='file:features/mindwm_crd.feature', name='', language='en', steps=[PickleStep(argument=None, ast_node_ids=['0'], id='5', type=<Type.context: 'Context'>, text='MindWM environment'), PickleStep(argument=None, ast_node_ids=['1'], id='6', type=<Type.action: 'Action'>, text='the user creates a MindWM context with the name xxx3'), PickleStep(argument=None, ast_node_ids=['2'], id='7', type=<Type.outcome: 'Outcome'>, text='validate that the context is ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='4')], ast_node_ids=['3'])"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["pytest_bdd_scenario","crd","@pytest.mark.usefixtures('feature', 'scenario', 'feature_source')","scenarios(PosixPath('/home/ci/mindwm-gitops/tests/mindwm_bdd/features/mindwm_crd.feature'), filter_=None, encoding='utf-8', features_base_dir=None, features_base_url=None, features_path_type=None, features_mimetype=None, parser_type=None, parse_args=Args(args=(), kwargs={}), locators=())","namespace(create=False, name='default')"]},"source":"ad35c2c712ab5ba5.json","parameterValues":["Feature(gherkin_document=GherkinDocument(uri='file:features/mindwm_crd.feature', feature=Feature(location=Location(line=2, column=1), tags=[Tag(location=Location(line=1, column=1), name='@crd', id='4')], language='en', keyword='Feature', name='Minwdm custom resource definition', description='', children=[FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=3, column=3), tags=[], keyword='Scenario', name='', description='', steps=[Step(location=Location(line=4, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='MindWM environment', doc_string=None, data_table=None, id='0'), Step(location=Location(line=5, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='the user creates a MindWM context with the name xxx3', doc_string=None, data_table=None, id='1'), Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='validate that the context is ready and operable', doc_string=None, data_table=None, id='2')], examples=[], id='3'))]), comments=[]), uri='file:features/mindwm_crd.feature', filename='/home/ci/mindwm-gitops/tests/mindwm_bdd/features/mindwm_crd.feature', registry={'4': Tag(location=Location(line=1, column=1), name='@crd', id='4'), '3': Scenario(location=Location(line=3, column=3), tags=[], keyword='Scenario', name='', description='', steps=[Step(location=Location(line=4, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='MindWM environment', doc_string=None, data_table=None, id='0'), Step(location=Location(line=5, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='the user creates a MindWM context with the name xxx3', doc_string=None, data_table=None, id='1'), Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='validate that the context is ready and operable', doc_string=None, data_table=None, id='2')], examples=[], id='3'), '0': Step(location=Location(line=4, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='MindWM environment', doc_string=None, data_table=None, id='0'), '1': Step(location=Location(line=5, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='the user creates a MindWM context with the name xxx3', doc_string=None, data_table=None, id='1'), '2': Step(location=Location(line=6, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='validate that the context is ready and operable', doc_string=None, data_table=None, id='2')}, pickles=[Pickle(id='8', uri='file:features/mindwm_crd.feature', name='', language='en', steps=[PickleStep(argument=None, ast_node_ids=['0'], id='5', type=<Type.context: 'Context'>, text='MindWM environment'), PickleStep(argument=None, ast_node_ids=['1'], id='6', type=<Type.action: 'Action'>, text='the user creates a MindWM context with the name xxx3'), PickleStep(argument=None, ast_node_ids=['2'], id='7', type=<Type.outcome: 'Outcome'>, text='validate that the context is ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='4')], ast_node_ids=['3'])])","Source(uri='file:features/mindwm_crd.feature', data='@crd\\nFeature: Minwdm custom resource definition\\n  Scenario: \\n    Given MindWM environment\\n    When the user creates a MindWM context with the name xxx3\\n    Then validate that the context is ready and operable\\n', media_type='text/x.cucumber.gherkin+plain')","Pickle(id='8', uri='file:features/mindwm_crd.feature', name='', language='en', steps=[PickleStep(argument=None, ast_node_ids=['0'], id='5', type=<Type.context: 'Context'>, text='MindWM environment'), PickleStep(argument=None, ast_node_ids=['1'], id='6', type=<Type.action: 'Action'>, text='the user creates a MindWM context with the name xxx3'), PickleStep(argument=None, ast_node_ids=['2'], id='7', type=<Type.outcome: 'Outcome'>, text='validate that the context is ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='4')], ast_node_ids=['3'])"]}