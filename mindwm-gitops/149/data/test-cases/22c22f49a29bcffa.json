{"uid":"22c22f49a29bcffa","name":"test_scenarios[file:features/1_mindwm_crd.feature-MindWM Custom Resource Definition-Delete Resources and Verify Cleanup]","fullName":"features.1_mindwm_crd#test_scenarios","historyId":"8c062fee0d67d594648acf14ca998157","time":{"start":1726859187435,"stop":1726859188593,"duration":1158},"status":"broken","statusMessage":"kubernetes.client.exceptions.ApiException: (404)\nReason: Not Found\nHTTP response headers: HTTPHeaderDict({'Audit-Id': 'd8b94769-db2e-4061-a43e-90ea87af1d53', 'Cache-Control': 'no-cache, private', 'Content-Type': 'application/json', 'X-Kubernetes-Pf-Flowschema-Uid': '28fdc954-7bda-41c0-825a-a61e49a66a61', 'X-Kubernetes-Pf-Prioritylevel-Uid': '36281f7c-23d0-4baf-9034-352d586431b1', 'Date': 'Fri, 20 Sep 2024 19:06:28 GMT', 'Content-Length': '214'})\nHTTP response body: {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"contexts.mindwm.io \\\"xxx3\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"xxx3\",\"group\":\"mindwm.io\",\"kind\":\"contexts\"},\"code\":404}","statusTrace":"self = <pytest_bdd.runner.ScenarioRunner object at 0x7178adca98e0>\nitem = <Function test_scenarios[file:features/1_mindwm_crd.feature-MindWM Custom Resource Definition-Delete Resources and Verify Cleanup]>\n\n    def pytest_runtest_call(self, item: Item):\n        if \"pytest_bdd_scenario\" in list(map(attrgetter(\"name\"), item.iter_markers())):\n            self.request = item._request\n            self.feature = self.request.getfixturevalue(\"feature\")\n            self.scenario = self.request.getfixturevalue(\"scenario\")\n            self.plugin_manager = self.request.config.hook\n            self.plugin_manager.pytest_bdd_before_scenario(\n                request=self.request, feature=self.feature, scenario=self.scenario\n            )\n            try:\n>               self.plugin_manager.pytest_bdd_run_scenario(\n                    request=self.request,\n                    feature=self.feature,\n                    scenario=self.scenario,\n                )\n\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:59: in pytest_bdd_run_scenario\n    return step_dispatcher(steps)\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:69: in dispatcher\n    self.plugin_manager.pytest_bdd_run_step(\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:128: in pytest_bdd_run_step\n    step_result = step_caller()\nconftest.py:181: in mindwm_context_deleted\n    context= mindwm_crd.context_get(kube, context_name)\nmindwm_crd.py:52: in context_get\n    resource = api_instance.get_namespaced_custom_object(\n.venv/lib/python3.12/site-packages/kubernetes/client/api/custom_objects_api.py:1627: in get_namespaced_custom_object\n    return self.get_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, **kwargs)  # noqa: E501\n.venv/lib/python3.12/site-packages/kubernetes/client/api/custom_objects_api.py:1734: in get_namespaced_custom_object_with_http_info\n    return self.api_client.call_api(\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:348: in call_api\n    return self.__call_api(resource_path, method,\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:180: in __call_api\n    response_data = self.request(\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:373: in request\n    return self.rest_client.GET(url,\n.venv/lib/python3.12/site-packages/kubernetes/client/rest.py:244: in GET\n    return self.request(\"GET\", url,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <kubernetes.client.rest.RESTClientObject object at 0x7178acc88bc0>\nmethod = 'GET'\nurl = 'https://127.0.0.1:6443/apis/mindwm.io/v1beta1/namespaces/default/contexts/xxx3'\nquery_params = []\nheaders = {'Accept': 'application/json', 'Content-Type': 'application/json', 'User-Agent': 'OpenAPI-Generator/30.1.0/python'}\nbody = None, post_params = {}, _preload_content = True, _request_timeout = None\n\n    def request(self, method, url, query_params=None, headers=None,\n                body=None, post_params=None, _preload_content=True,\n                _request_timeout=None):\n        \"\"\"Perform requests.\n    \n        :param method: http request method\n        :param url: http request url\n        :param query_params: query parameters in the url\n        :param headers: http request headers\n        :param body: request json body, for `application/json`\n        :param post_params: request post parameters,\n                            `application/x-www-form-urlencoded`\n                            and `multipart/form-data`\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        \"\"\"\n        method = method.upper()\n        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',\n                          'PATCH', 'OPTIONS']\n    \n        if post_params and body:\n            raise ApiValueError(\n                \"body parameter cannot be used with post_params parameter.\"\n            )\n    \n        post_params = post_params or {}\n        headers = headers or {}\n    \n        timeout = None\n        if _request_timeout:\n            if isinstance(_request_timeout, (int, ) if six.PY3 else (int, long)):  # noqa: E501,F821\n                timeout = urllib3.Timeout(total=_request_timeout)\n            elif (isinstance(_request_timeout, tuple) and\n                  len(_request_timeout) == 2):\n                timeout = urllib3.Timeout(\n                    connect=_request_timeout[0], read=_request_timeout[1])\n    \n        if 'Content-Type' not in headers:\n            headers['Content-Type'] = 'application/json'\n    \n        try:\n            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:\n                if query_params:\n                    url += '?' + urlencode(query_params)\n                if (re.search('json', headers['Content-Type'], re.IGNORECASE) or\n                        headers['Content-Type'] == 'application/apply-patch+yaml'):\n                    if headers['Content-Type'] == 'application/json-patch+json':\n                        if not isinstance(body, list):\n                            headers['Content-Type'] = \\\n                                'application/strategic-merge-patch+json'\n                    request_body = None\n                    if body is not None:\n                        request_body = json.dumps(body)\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=False,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'multipart/form-data':\n                    # must del headers['Content-Type'], or the correct\n                    # Content-Type which generated by urllib3 will be\n                    # overwritten.\n                    del headers['Content-Type']\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=True,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                # Pass a `string` parameter directly in the body to support\n                # other content types than Json when `body` argument is\n                # provided in serialized form\n                elif isinstance(body, str) or isinstance(body, bytes):\n                    request_body = body\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                else:\n                    # Cannot generate the request from given parameters\n                    msg = \"\"\"Cannot prepare a request message for provided\n                             arguments. Please check that your arguments match\n                             declared content type.\"\"\"\n                    raise ApiException(status=0, reason=msg)\n            # For `GET`, `HEAD`\n            else:\n                r = self.pool_manager.request(method, url,\n                                              fields=query_params,\n                                              preload_content=_preload_content,\n                                              timeout=timeout,\n                                              headers=headers)\n        except urllib3.exceptions.SSLError as e:\n            msg = \"{0}\\n{1}\".format(type(e).__name__, str(e))\n            raise ApiException(status=0, reason=msg)\n    \n        if _preload_content:\n            r = RESTResponse(r)\n    \n            # In the python 3, the response.data is bytes.\n            # we need to decode it to string.\n            if six.PY3:\n                r.data = r.data.decode('utf8')\n    \n            # log response body\n            logger.debug(\"response body: %s\", r.data)\n    \n        if not 200 <= r.status <= 299:\n>           raise ApiException(http_resp=r)\nE           kubernetes.client.exceptions.ApiException: (404)\nE           Reason: Not Found\nE           HTTP response headers: HTTPHeaderDict({'Audit-Id': 'd8b94769-db2e-4061-a43e-90ea87af1d53', 'Cache-Control': 'no-cache, private', 'Content-Type': 'application/json', 'X-Kubernetes-Pf-Flowschema-Uid': '28fdc954-7bda-41c0-825a-a61e49a66a61', 'X-Kubernetes-Pf-Prioritylevel-Uid': '36281f7c-23d0-4baf-9034-352d586431b1', 'Date': 'Fri, 20 Sep 2024 19:06:28 GMT', 'Content-Length': '214'})\nE           HTTP response body: {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"contexts.mindwm.io \\\"xxx3\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"xxx3\",\"group\":\"mindwm.io\",\"kind\":\"contexts\"},\"code\":404}\n\n.venv/lib/python3.12/site-packages/kubernetes/client/rest.py:238: ApiException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1726858184732,"stop":1726858184732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"steps_left","time":{"start":1726859187435,"stop":1726859187435,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_matcher","time":{"start":1726859187436,"stop":1726859187436,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_registry","time":{"start":1726859187436,"stop":1726859187436,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"step_registry","time":{"start":1726859187436,"stop":1726859187436,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"parameter_type_registry","time":{"start":1726859187436,"stop":1726859187436,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubeconfig","time":{"start":1726859187437,"stop":1726859187437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kubecontext","time":{"start":1726859187437,"stop":1726859187437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"kube","time":{"start":1726859187437,"stop":1726859187440,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"kubernetes.client.exceptions.ApiException: (404)\nReason: Not Found\nHTTP response headers: HTTPHeaderDict({'Audit-Id': 'd8b94769-db2e-4061-a43e-90ea87af1d53', 'Cache-Control': 'no-cache, private', 'Content-Type': 'application/json', 'X-Kubernetes-Pf-Flowschema-Uid': '28fdc954-7bda-41c0-825a-a61e49a66a61', 'X-Kubernetes-Pf-Prioritylevel-Uid': '36281f7c-23d0-4baf-9034-352d586431b1', 'Date': 'Fri, 20 Sep 2024 19:06:28 GMT', 'Content-Length': '214'})\nHTTP response body: {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"contexts.mindwm.io \\\"xxx3\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"xxx3\",\"group\":\"mindwm.io\",\"kind\":\"contexts\"},\"code\":404}","statusTrace":"self = <pytest_bdd.runner.ScenarioRunner object at 0x7178adca98e0>\nitem = <Function test_scenarios[file:features/1_mindwm_crd.feature-MindWM Custom Resource Definition-Delete Resources and Verify Cleanup]>\n\n    def pytest_runtest_call(self, item: Item):\n        if \"pytest_bdd_scenario\" in list(map(attrgetter(\"name\"), item.iter_markers())):\n            self.request = item._request\n            self.feature = self.request.getfixturevalue(\"feature\")\n            self.scenario = self.request.getfixturevalue(\"scenario\")\n            self.plugin_manager = self.request.config.hook\n            self.plugin_manager.pytest_bdd_before_scenario(\n                request=self.request, feature=self.feature, scenario=self.scenario\n            )\n            try:\n>               self.plugin_manager.pytest_bdd_run_scenario(\n                    request=self.request,\n                    feature=self.feature,\n                    scenario=self.scenario,\n                )\n\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:59: in pytest_bdd_run_scenario\n    return step_dispatcher(steps)\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:69: in dispatcher\n    self.plugin_manager.pytest_bdd_run_step(\n.venv/lib/python3.12/site-packages/pytest_bdd/runner.py:128: in pytest_bdd_run_step\n    step_result = step_caller()\nconftest.py:181: in mindwm_context_deleted\n    context= mindwm_crd.context_get(kube, context_name)\nmindwm_crd.py:52: in context_get\n    resource = api_instance.get_namespaced_custom_object(\n.venv/lib/python3.12/site-packages/kubernetes/client/api/custom_objects_api.py:1627: in get_namespaced_custom_object\n    return self.get_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, **kwargs)  # noqa: E501\n.venv/lib/python3.12/site-packages/kubernetes/client/api/custom_objects_api.py:1734: in get_namespaced_custom_object_with_http_info\n    return self.api_client.call_api(\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:348: in call_api\n    return self.__call_api(resource_path, method,\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:180: in __call_api\n    response_data = self.request(\n.venv/lib/python3.12/site-packages/kubernetes/client/api_client.py:373: in request\n    return self.rest_client.GET(url,\n.venv/lib/python3.12/site-packages/kubernetes/client/rest.py:244: in GET\n    return self.request(\"GET\", url,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <kubernetes.client.rest.RESTClientObject object at 0x7178acc88bc0>\nmethod = 'GET'\nurl = 'https://127.0.0.1:6443/apis/mindwm.io/v1beta1/namespaces/default/contexts/xxx3'\nquery_params = []\nheaders = {'Accept': 'application/json', 'Content-Type': 'application/json', 'User-Agent': 'OpenAPI-Generator/30.1.0/python'}\nbody = None, post_params = {}, _preload_content = True, _request_timeout = None\n\n    def request(self, method, url, query_params=None, headers=None,\n                body=None, post_params=None, _preload_content=True,\n                _request_timeout=None):\n        \"\"\"Perform requests.\n    \n        :param method: http request method\n        :param url: http request url\n        :param query_params: query parameters in the url\n        :param headers: http request headers\n        :param body: request json body, for `application/json`\n        :param post_params: request post parameters,\n                            `application/x-www-form-urlencoded`\n                            and `multipart/form-data`\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        \"\"\"\n        method = method.upper()\n        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',\n                          'PATCH', 'OPTIONS']\n    \n        if post_params and body:\n            raise ApiValueError(\n                \"body parameter cannot be used with post_params parameter.\"\n            )\n    \n        post_params = post_params or {}\n        headers = headers or {}\n    \n        timeout = None\n        if _request_timeout:\n            if isinstance(_request_timeout, (int, ) if six.PY3 else (int, long)):  # noqa: E501,F821\n                timeout = urllib3.Timeout(total=_request_timeout)\n            elif (isinstance(_request_timeout, tuple) and\n                  len(_request_timeout) == 2):\n                timeout = urllib3.Timeout(\n                    connect=_request_timeout[0], read=_request_timeout[1])\n    \n        if 'Content-Type' not in headers:\n            headers['Content-Type'] = 'application/json'\n    \n        try:\n            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:\n                if query_params:\n                    url += '?' + urlencode(query_params)\n                if (re.search('json', headers['Content-Type'], re.IGNORECASE) or\n                        headers['Content-Type'] == 'application/apply-patch+yaml'):\n                    if headers['Content-Type'] == 'application/json-patch+json':\n                        if not isinstance(body, list):\n                            headers['Content-Type'] = \\\n                                'application/strategic-merge-patch+json'\n                    request_body = None\n                    if body is not None:\n                        request_body = json.dumps(body)\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=False,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'multipart/form-data':\n                    # must del headers['Content-Type'], or the correct\n                    # Content-Type which generated by urllib3 will be\n                    # overwritten.\n                    del headers['Content-Type']\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=True,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                # Pass a `string` parameter directly in the body to support\n                # other content types than Json when `body` argument is\n                # provided in serialized form\n                elif isinstance(body, str) or isinstance(body, bytes):\n                    request_body = body\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                else:\n                    # Cannot generate the request from given parameters\n                    msg = \"\"\"Cannot prepare a request message for provided\n                             arguments. Please check that your arguments match\n                             declared content type.\"\"\"\n                    raise ApiException(status=0, reason=msg)\n            # For `GET`, `HEAD`\n            else:\n                r = self.pool_manager.request(method, url,\n                                              fields=query_params,\n                                              preload_content=_preload_content,\n                                              timeout=timeout,\n                                              headers=headers)\n        except urllib3.exceptions.SSLError as e:\n            msg = \"{0}\\n{1}\".format(type(e).__name__, str(e))\n            raise ApiException(status=0, reason=msg)\n    \n        if _preload_content:\n            r = RESTResponse(r)\n    \n            # In the python 3, the response.data is bytes.\n            # we need to decode it to string.\n            if six.PY3:\n                r.data = r.data.decode('utf8')\n    \n            # log response body\n            logger.debug(\"response body: %s\", r.data)\n    \n        if not 200 <= r.status <= 299:\n>           raise ApiException(http_resp=r)\nE           kubernetes.client.exceptions.ApiException: (404)\nE           Reason: Not Found\nE           HTTP response headers: HTTPHeaderDict({'Audit-Id': 'd8b94769-db2e-4061-a43e-90ea87af1d53', 'Cache-Control': 'no-cache, private', 'Content-Type': 'application/json', 'X-Kubernetes-Pf-Flowschema-Uid': '28fdc954-7bda-41c0-825a-a61e49a66a61', 'X-Kubernetes-Pf-Prioritylevel-Uid': '36281f7c-23d0-4baf-9034-352d586431b1', 'Date': 'Fri, 20 Sep 2024 19:06:28 GMT', 'Content-Length': '214'})\nE           HTTP response body: {\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"contexts.mindwm.io \\\"xxx3\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"xxx3\",\"group\":\"mindwm.io\",\"kind\":\"contexts\"},\"code\":404}\n\n.venv/lib/python3.12/site-packages/kubernetes/client/rest.py:238: ApiException","steps":[{"name":"Mindwm crd 'xcontexts' is exists","time":{"start":1726859187454,"stop":1726859187454,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Mindwm crd 'xhosts' is exists","time":{"start":1726859187460,"stop":1726859187460,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Mindwm crd 'xusers' is exists","time":{"start":1726859187466,"stop":1726859187466,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Mindwm host laptop delete","time":{"start":1726859187484,"stop":1726859187484,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Mindwm host laptop has been deleted","time":{"start":1726859187509,"stop":1726859187509,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Mindwm user alice delete","time":{"start":1726859187534,"stop":1726859187535,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Mindwm user alice has been deleted","time":{"start":1726859188562,"stop":1726859188562,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Mindwm context xxx3 delete","time":{"start":1726859188579,"stop":1726859188579,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"scenarios(PosixPath('/home/ci/mindwm-gitops/tests/mindwm_bdd/features/1_mindwm_crd.feature'), filter_=None, encoding='utf-8', features_base_dir=None, features_base_url=None, features_path_type=None, features_mimetype=None, parser_type=None, parse_args=Args(args=(), kwargs={}), locators=())"},{"name":"tag","value":"@pytest.mark.usefixtures('feature', 'scenario', 'feature_source')"},{"name":"tag","value":"pytest_bdd_scenario"},{"name":"tag","value":"crd"},{"name":"tag","value":"namespace(create=False, name='default')"},{"name":"parentSuite","value":"features"},{"name":"suite","value":"1_mindwm_crd"},{"name":"host","value":"localhost"},{"name":"thread","value":"4129-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"features.1_mindwm_crd"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"feature","value":"Feature(gherkin_document=GherkinDocument(uri='file:features/1_mindwm_crd.feature', feature=Feature(location=Location(line=2, column=1), tags=[Tag(location=Location(line=1, column=1), name='@crd', id='178')], language='en', keyword='Feature', name='MindWM Custom Resource Definition', description='', children=[FeatureChild(rule=None, background=Background(location=Location(line=4, column=3), keyword='Background', name='', description='', steps=[Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='160')], id='161'), scenario=None), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=7, column=3), tags=[], keyword='Scenario', name='Create Context', description='', steps=[Step(location=Location(line=8, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"xxx3\"', doc_string=None, data_table=None, id='162'), Step(location=Location(line=9, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='163')], examples=[], id='164')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=11, column=3), tags=[], keyword='Scenario', name='Create User', description='', steps=[Step(location=Location(line=12, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"', doc_string=None, data_table=None, id='165'), Step(location=Location(line=13, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='166')], examples=[], id='167')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=15, column=3), tags=[], keyword='Scenario', name='Create Host', description='', steps=[Step(location=Location(line=16, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"', doc_string=None, data_table=None, id='168'), Step(location=Location(line=17, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='169')], examples=[], id='170')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=19, column=3), tags=[], keyword='Scenario', name='Delete Resources and Verify Cleanup', description='', steps=[Step(location=Location(line=20, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"', doc_string=None, data_table=None, id='171'), Step(location=Location(line=21, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted', doc_string=None, data_table=None, id='172'), Step(location=Location(line=22, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"', doc_string=None, data_table=None, id='173'), Step(location=Location(line=23, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"alice\" should be deleted', doc_string=None, data_table=None, id='174'), Step(location=Location(line=24, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"', doc_string=None, data_table=None, id='175'), Step(location=Location(line=25, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted', doc_string=None, data_table=None, id='176')], examples=[], id='177'))]), comments=[]), uri='file:features/1_mindwm_crd.feature', filename='/home/ci/mindwm-gitops/tests/mindwm_bdd/features/1_mindwm_crd.feature', registry={'178': Tag(location=Location(line=1, column=1), name='@crd', id='178'), '161': Background(location=Location(line=4, column=3), keyword='Background', name='', description='', steps=[Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='160')], id='161'), '160': Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='160'), '164': Scenario(location=Location(line=7, column=3), tags=[], keyword='Scenario', name='Create Context', description='', steps=[Step(location=Location(line=8, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"xxx3\"', doc_string=None, data_table=None, id='162'), Step(location=Location(line=9, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='163')], examples=[], id='164'), '162': Step(location=Location(line=8, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"xxx3\"', doc_string=None, data_table=None, id='162'), '163': Step(location=Location(line=9, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='163'), '167': Scenario(location=Location(line=11, column=3), tags=[], keyword='Scenario', name='Create User', description='', steps=[Step(location=Location(line=12, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"', doc_string=None, data_table=None, id='165'), Step(location=Location(line=13, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='166')], examples=[], id='167'), '165': Step(location=Location(line=12, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"', doc_string=None, data_table=None, id='165'), '166': Step(location=Location(line=13, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='166'), '170': Scenario(location=Location(line=15, column=3), tags=[], keyword='Scenario', name='Create Host', description='', steps=[Step(location=Location(line=16, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"', doc_string=None, data_table=None, id='168'), Step(location=Location(line=17, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='169')], examples=[], id='170'), '168': Step(location=Location(line=16, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"', doc_string=None, data_table=None, id='168'), '169': Step(location=Location(line=17, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='169'), '177': Scenario(location=Location(line=19, column=3), tags=[], keyword='Scenario', name='Delete Resources and Verify Cleanup', description='', steps=[Step(location=Location(line=20, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"', doc_string=None, data_table=None, id='171'), Step(location=Location(line=21, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted', doc_string=None, data_table=None, id='172'), Step(location=Location(line=22, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"', doc_string=None, data_table=None, id='173'), Step(location=Location(line=23, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"alice\" should be deleted', doc_string=None, data_table=None, id='174'), Step(location=Location(line=24, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"', doc_string=None, data_table=None, id='175'), Step(location=Location(line=25, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted', doc_string=None, data_table=None, id='176')], examples=[], id='177'), '171': Step(location=Location(line=20, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"', doc_string=None, data_table=None, id='171'), '172': Step(location=Location(line=21, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted', doc_string=None, data_table=None, id='172'), '173': Step(location=Location(line=22, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"', doc_string=None, data_table=None, id='173'), '174': Step(location=Location(line=23, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"alice\" should be deleted', doc_string=None, data_table=None, id='174'), '175': Step(location=Location(line=24, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"', doc_string=None, data_table=None, id='175'), '176': Step(location=Location(line=25, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted', doc_string=None, data_table=None, id='176')}, pickles=[Pickle(id='182', uri='file:features/1_mindwm_crd.feature', name='Create Context', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='179', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['162'], id='180', type=<Type.action: 'Action'>, text='God creates a MindWM context with the name \"xxx3\"'), PickleStep(argument=None, ast_node_ids=['163'], id='181', type=<Type.outcome: 'Outcome'>, text='the context should be ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['164']), Pickle(id='186', uri='file:features/1_mindwm_crd.feature', name='Create User', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='183', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['165'], id='184', type=<Type.action: 'Action'>, text='God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"'), PickleStep(argument=None, ast_node_ids=['166'], id='185', type=<Type.outcome: 'Outcome'>, text='the user resource should be ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['167']), Pickle(id='190', uri='file:features/1_mindwm_crd.feature', name='Create Host', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='187', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['168'], id='188', type=<Type.action: 'Action'>, text='God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"'), PickleStep(argument=None, ast_node_ids=['169'], id='189', type=<Type.outcome: 'Outcome'>, text='the host resource should be ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['170']), Pickle(id='198', uri='file:features/1_mindwm_crd.feature', name='Delete Resources and Verify Cleanup', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='191', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['171'], id='192', type=<Type.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"'), PickleStep(argument=None, ast_node_ids=['172'], id='193', type=<Type.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted'), PickleStep(argument=None, ast_node_ids=['173'], id='194', type=<Type.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"'), PickleStep(argument=None, ast_node_ids=['174'], id='195', type=<Type.outcome: 'Outcome'>, text='the user \"alice\" should be deleted'), PickleStep(argument=None, ast_node_ids=['175'], id='196', type=<Type.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"'), PickleStep(argument=None, ast_node_ids=['176'], id='197', type=<Type.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['177'])])"},{"name":"feature_source","value":"Source(uri='file:features/1_mindwm_crd.feature', data='@crd\\nFeature: MindWM Custom Resource Definition\\n\\n  Background:\\n    Given a MindWM environment\\n    \\n  Scenario: Create Context \\n    When God creates a MindWM context with the name \"xxx3\"\\n    Then the context should be ready and operable\\n\\n  Scenario: Create User \\n    When God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"\\n    Then the user resource should be ready and operable\\n\\n  Scenario: Create Host\\n    When God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"\\n    Then the host resource should be ready and operable\\n\\n  Scenario: Delete Resources and Verify Cleanup\\n    When God deletes the MindWM host resource \"laptop\"\\n    Then the host \"laptop\" should be deleted\\n    When God deletes the MindWM user resource \"alice\"\\n    Then the user \"alice\" should be deleted\\n    When God deletes the MindWM context resource \"xxx3\"\\n    Then the context \"xxx3\" should be deleted\\n   \\t \\n', media_type='text/x.cucumber.gherkin+plain')"},{"name":"scenario","value":"Pickle(id='198', uri='file:features/1_mindwm_crd.feature', name='Delete Resources and Verify Cleanup', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='191', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['171'], id='192', type=<Type.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"'), PickleStep(argument=None, ast_node_ids=['172'], id='193', type=<Type.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted'), PickleStep(argument=None, ast_node_ids=['173'], id='194', type=<Type.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"'), PickleStep(argument=None, ast_node_ids=['174'], id='195', type=<Type.outcome: 'Outcome'>, text='the user \"alice\" should be deleted'), PickleStep(argument=None, ast_node_ids=['175'], id='196', type=<Type.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"'), PickleStep(argument=None, ast_node_ids=['176'], id='197', type=<Type.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['177'])"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["pytest_bdd_scenario","crd","@pytest.mark.usefixtures('feature', 'scenario', 'feature_source')","scenarios(PosixPath('/home/ci/mindwm-gitops/tests/mindwm_bdd/features/1_mindwm_crd.feature'), filter_=None, encoding='utf-8', features_base_dir=None, features_base_url=None, features_path_type=None, features_mimetype=None, parser_type=None, parse_args=Args(args=(), kwargs={}), locators=())","namespace(create=False, name='default')"]},"source":"22c22f49a29bcffa.json","parameterValues":["Feature(gherkin_document=GherkinDocument(uri='file:features/1_mindwm_crd.feature', feature=Feature(location=Location(line=2, column=1), tags=[Tag(location=Location(line=1, column=1), name='@crd', id='178')], language='en', keyword='Feature', name='MindWM Custom Resource Definition', description='', children=[FeatureChild(rule=None, background=Background(location=Location(line=4, column=3), keyword='Background', name='', description='', steps=[Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='160')], id='161'), scenario=None), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=7, column=3), tags=[], keyword='Scenario', name='Create Context', description='', steps=[Step(location=Location(line=8, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"xxx3\"', doc_string=None, data_table=None, id='162'), Step(location=Location(line=9, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='163')], examples=[], id='164')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=11, column=3), tags=[], keyword='Scenario', name='Create User', description='', steps=[Step(location=Location(line=12, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"', doc_string=None, data_table=None, id='165'), Step(location=Location(line=13, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='166')], examples=[], id='167')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=15, column=3), tags=[], keyword='Scenario', name='Create Host', description='', steps=[Step(location=Location(line=16, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"', doc_string=None, data_table=None, id='168'), Step(location=Location(line=17, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='169')], examples=[], id='170')), FeatureChild(rule=None, background=None, scenario=Scenario(location=Location(line=19, column=3), tags=[], keyword='Scenario', name='Delete Resources and Verify Cleanup', description='', steps=[Step(location=Location(line=20, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"', doc_string=None, data_table=None, id='171'), Step(location=Location(line=21, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted', doc_string=None, data_table=None, id='172'), Step(location=Location(line=22, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"', doc_string=None, data_table=None, id='173'), Step(location=Location(line=23, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"alice\" should be deleted', doc_string=None, data_table=None, id='174'), Step(location=Location(line=24, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"', doc_string=None, data_table=None, id='175'), Step(location=Location(line=25, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted', doc_string=None, data_table=None, id='176')], examples=[], id='177'))]), comments=[]), uri='file:features/1_mindwm_crd.feature', filename='/home/ci/mindwm-gitops/tests/mindwm_bdd/features/1_mindwm_crd.feature', registry={'178': Tag(location=Location(line=1, column=1), name='@crd', id='178'), '161': Background(location=Location(line=4, column=3), keyword='Background', name='', description='', steps=[Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='160')], id='161'), '160': Step(location=Location(line=5, column=5), keyword='Given ', keyword_type=<KeywordType.context: 'Context'>, text='a MindWM environment', doc_string=None, data_table=None, id='160'), '164': Scenario(location=Location(line=7, column=3), tags=[], keyword='Scenario', name='Create Context', description='', steps=[Step(location=Location(line=8, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"xxx3\"', doc_string=None, data_table=None, id='162'), Step(location=Location(line=9, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='163')], examples=[], id='164'), '162': Step(location=Location(line=8, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM context with the name \"xxx3\"', doc_string=None, data_table=None, id='162'), '163': Step(location=Location(line=9, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context should be ready and operable', doc_string=None, data_table=None, id='163'), '167': Scenario(location=Location(line=11, column=3), tags=[], keyword='Scenario', name='Create User', description='', steps=[Step(location=Location(line=12, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"', doc_string=None, data_table=None, id='165'), Step(location=Location(line=13, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='166')], examples=[], id='167'), '165': Step(location=Location(line=12, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"', doc_string=None, data_table=None, id='165'), '166': Step(location=Location(line=13, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user resource should be ready and operable', doc_string=None, data_table=None, id='166'), '170': Scenario(location=Location(line=15, column=3), tags=[], keyword='Scenario', name='Create Host', description='', steps=[Step(location=Location(line=16, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"', doc_string=None, data_table=None, id='168'), Step(location=Location(line=17, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='169')], examples=[], id='170'), '168': Step(location=Location(line=16, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"', doc_string=None, data_table=None, id='168'), '169': Step(location=Location(line=17, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host resource should be ready and operable', doc_string=None, data_table=None, id='169'), '177': Scenario(location=Location(line=19, column=3), tags=[], keyword='Scenario', name='Delete Resources and Verify Cleanup', description='', steps=[Step(location=Location(line=20, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"', doc_string=None, data_table=None, id='171'), Step(location=Location(line=21, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted', doc_string=None, data_table=None, id='172'), Step(location=Location(line=22, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"', doc_string=None, data_table=None, id='173'), Step(location=Location(line=23, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"alice\" should be deleted', doc_string=None, data_table=None, id='174'), Step(location=Location(line=24, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"', doc_string=None, data_table=None, id='175'), Step(location=Location(line=25, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted', doc_string=None, data_table=None, id='176')], examples=[], id='177'), '171': Step(location=Location(line=20, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"', doc_string=None, data_table=None, id='171'), '172': Step(location=Location(line=21, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted', doc_string=None, data_table=None, id='172'), '173': Step(location=Location(line=22, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"', doc_string=None, data_table=None, id='173'), '174': Step(location=Location(line=23, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the user \"alice\" should be deleted', doc_string=None, data_table=None, id='174'), '175': Step(location=Location(line=24, column=5), keyword='When ', keyword_type=<KeywordType.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"', doc_string=None, data_table=None, id='175'), '176': Step(location=Location(line=25, column=5), keyword='Then ', keyword_type=<KeywordType.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted', doc_string=None, data_table=None, id='176')}, pickles=[Pickle(id='182', uri='file:features/1_mindwm_crd.feature', name='Create Context', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='179', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['162'], id='180', type=<Type.action: 'Action'>, text='God creates a MindWM context with the name \"xxx3\"'), PickleStep(argument=None, ast_node_ids=['163'], id='181', type=<Type.outcome: 'Outcome'>, text='the context should be ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['164']), Pickle(id='186', uri='file:features/1_mindwm_crd.feature', name='Create User', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='183', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['165'], id='184', type=<Type.action: 'Action'>, text='God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"'), PickleStep(argument=None, ast_node_ids=['166'], id='185', type=<Type.outcome: 'Outcome'>, text='the user resource should be ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['167']), Pickle(id='190', uri='file:features/1_mindwm_crd.feature', name='Create Host', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='187', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['168'], id='188', type=<Type.action: 'Action'>, text='God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"'), PickleStep(argument=None, ast_node_ids=['169'], id='189', type=<Type.outcome: 'Outcome'>, text='the host resource should be ready and operable')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['170']), Pickle(id='198', uri='file:features/1_mindwm_crd.feature', name='Delete Resources and Verify Cleanup', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='191', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['171'], id='192', type=<Type.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"'), PickleStep(argument=None, ast_node_ids=['172'], id='193', type=<Type.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted'), PickleStep(argument=None, ast_node_ids=['173'], id='194', type=<Type.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"'), PickleStep(argument=None, ast_node_ids=['174'], id='195', type=<Type.outcome: 'Outcome'>, text='the user \"alice\" should be deleted'), PickleStep(argument=None, ast_node_ids=['175'], id='196', type=<Type.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"'), PickleStep(argument=None, ast_node_ids=['176'], id='197', type=<Type.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['177'])])","Source(uri='file:features/1_mindwm_crd.feature', data='@crd\\nFeature: MindWM Custom Resource Definition\\n\\n  Background:\\n    Given a MindWM environment\\n    \\n  Scenario: Create Context \\n    When God creates a MindWM context with the name \"xxx3\"\\n    Then the context should be ready and operable\\n\\n  Scenario: Create User \\n    When God creates a MindWM user resource with the name \"alice\" and connects it to the context \"xxx3\"\\n    Then the user resource should be ready and operable\\n\\n  Scenario: Create Host\\n    When God creates a MindWM host resource with the name \"laptop\" and connects it to the user \"alice\"\\n    Then the host resource should be ready and operable\\n\\n  Scenario: Delete Resources and Verify Cleanup\\n    When God deletes the MindWM host resource \"laptop\"\\n    Then the host \"laptop\" should be deleted\\n    When God deletes the MindWM user resource \"alice\"\\n    Then the user \"alice\" should be deleted\\n    When God deletes the MindWM context resource \"xxx3\"\\n    Then the context \"xxx3\" should be deleted\\n   \\t \\n', media_type='text/x.cucumber.gherkin+plain')","Pickle(id='198', uri='file:features/1_mindwm_crd.feature', name='Delete Resources and Verify Cleanup', language='en', steps=[PickleStep(argument=None, ast_node_ids=['160'], id='191', type=<Type.context: 'Context'>, text='a MindWM environment'), PickleStep(argument=None, ast_node_ids=['171'], id='192', type=<Type.action: 'Action'>, text='God deletes the MindWM host resource \"laptop\"'), PickleStep(argument=None, ast_node_ids=['172'], id='193', type=<Type.outcome: 'Outcome'>, text='the host \"laptop\" should be deleted'), PickleStep(argument=None, ast_node_ids=['173'], id='194', type=<Type.action: 'Action'>, text='God deletes the MindWM user resource \"alice\"'), PickleStep(argument=None, ast_node_ids=['174'], id='195', type=<Type.outcome: 'Outcome'>, text='the user \"alice\" should be deleted'), PickleStep(argument=None, ast_node_ids=['175'], id='196', type=<Type.action: 'Action'>, text='God deletes the MindWM context resource \"xxx3\"'), PickleStep(argument=None, ast_node_ids=['176'], id='197', type=<Type.outcome: 'Outcome'>, text='the context \"xxx3\" should be deleted')], tags=[PickleTag(name='@crd', ast_node_id='178')], ast_node_ids=['177'])"]}